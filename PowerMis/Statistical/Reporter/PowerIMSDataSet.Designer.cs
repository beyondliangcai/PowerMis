//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.6387
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace PowerMis.Statistical.Reporter {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PowerIMSDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PowerIMSDataSet : global::System.Data.DataSet {
        
        private Temp_MonthPowerFeeDataTable tableTemp_MonthPowerFee;
        
        private Temp_CAreaPowerDataTable tableTemp_CAreaPower;
        
        private Temp_LinePowerDataTable tableTemp_LinePower;
        
        private Temp_RAreaPowerDataTable tableTemp_RAreaPower;
        
        private Temp_HingePowerDataTable tableTemp_HingePower;
        
        private Temp_PowerFeeListDataTable tableTemp_PowerFeeList;
        
        private V_Volumn_List1DataTable tableV_Volumn_List1;
        
        private Temp_InvoiceTotalDataTable tableTemp_InvoiceTotal;
        
        private Temp_DayChargeDataTable tableTemp_DayCharge;
        
        private Temp_MonthChargeDataTable tableTemp_MonthCharge;
        
        private Temp_CityArrearDataTable tableTemp_CityArrear;
        
        private Temp_ArrearSumDataTable tableTemp_ArrearSum;
        
        private V_RuralOweDataTable tableV_RuralOwe;
        
        private NegativeInvoiceDataTable tableNegativeInvoice;
        
        private Temp_ArrearYearsSumDataTable tableTemp_ArrearYearsSum;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PowerIMSDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PowerIMSDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Temp_MonthPowerFee"] != null)) {
                    base.Tables.Add(new Temp_MonthPowerFeeDataTable(ds.Tables["Temp_MonthPowerFee"]));
                }
                if ((ds.Tables["Temp_CAreaPower"] != null)) {
                    base.Tables.Add(new Temp_CAreaPowerDataTable(ds.Tables["Temp_CAreaPower"]));
                }
                if ((ds.Tables["Temp_LinePower"] != null)) {
                    base.Tables.Add(new Temp_LinePowerDataTable(ds.Tables["Temp_LinePower"]));
                }
                if ((ds.Tables["Temp_RAreaPower"] != null)) {
                    base.Tables.Add(new Temp_RAreaPowerDataTable(ds.Tables["Temp_RAreaPower"]));
                }
                if ((ds.Tables["Temp_HingePower"] != null)) {
                    base.Tables.Add(new Temp_HingePowerDataTable(ds.Tables["Temp_HingePower"]));
                }
                if ((ds.Tables["Temp_PowerFeeList"] != null)) {
                    base.Tables.Add(new Temp_PowerFeeListDataTable(ds.Tables["Temp_PowerFeeList"]));
                }
                if ((ds.Tables["V_Volumn_List1"] != null)) {
                    base.Tables.Add(new V_Volumn_List1DataTable(ds.Tables["V_Volumn_List1"]));
                }
                if ((ds.Tables["Temp_InvoiceTotal"] != null)) {
                    base.Tables.Add(new Temp_InvoiceTotalDataTable(ds.Tables["Temp_InvoiceTotal"]));
                }
                if ((ds.Tables["Temp_DayCharge"] != null)) {
                    base.Tables.Add(new Temp_DayChargeDataTable(ds.Tables["Temp_DayCharge"]));
                }
                if ((ds.Tables["Temp_MonthCharge"] != null)) {
                    base.Tables.Add(new Temp_MonthChargeDataTable(ds.Tables["Temp_MonthCharge"]));
                }
                if ((ds.Tables["Temp_CityArrear"] != null)) {
                    base.Tables.Add(new Temp_CityArrearDataTable(ds.Tables["Temp_CityArrear"]));
                }
                if ((ds.Tables["Temp_ArrearSum"] != null)) {
                    base.Tables.Add(new Temp_ArrearSumDataTable(ds.Tables["Temp_ArrearSum"]));
                }
                if ((ds.Tables["V_RuralOwe"] != null)) {
                    base.Tables.Add(new V_RuralOweDataTable(ds.Tables["V_RuralOwe"]));
                }
                if ((ds.Tables["NegativeInvoice"] != null)) {
                    base.Tables.Add(new NegativeInvoiceDataTable(ds.Tables["NegativeInvoice"]));
                }
                if ((ds.Tables["Temp_ArrearYearsSum"] != null)) {
                    base.Tables.Add(new Temp_ArrearYearsSumDataTable(ds.Tables["Temp_ArrearYearsSum"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_MonthPowerFeeDataTable Temp_MonthPowerFee {
            get {
                return this.tableTemp_MonthPowerFee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_CAreaPowerDataTable Temp_CAreaPower {
            get {
                return this.tableTemp_CAreaPower;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_LinePowerDataTable Temp_LinePower {
            get {
                return this.tableTemp_LinePower;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_RAreaPowerDataTable Temp_RAreaPower {
            get {
                return this.tableTemp_RAreaPower;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_HingePowerDataTable Temp_HingePower {
            get {
                return this.tableTemp_HingePower;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_PowerFeeListDataTable Temp_PowerFeeList {
            get {
                return this.tableTemp_PowerFeeList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_Volumn_List1DataTable V_Volumn_List1 {
            get {
                return this.tableV_Volumn_List1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_InvoiceTotalDataTable Temp_InvoiceTotal {
            get {
                return this.tableTemp_InvoiceTotal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_DayChargeDataTable Temp_DayCharge {
            get {
                return this.tableTemp_DayCharge;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_MonthChargeDataTable Temp_MonthCharge {
            get {
                return this.tableTemp_MonthCharge;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_CityArrearDataTable Temp_CityArrear {
            get {
                return this.tableTemp_CityArrear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_ArrearSumDataTable Temp_ArrearSum {
            get {
                return this.tableTemp_ArrearSum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_RuralOweDataTable V_RuralOwe {
            get {
                return this.tableV_RuralOwe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NegativeInvoiceDataTable NegativeInvoice {
            get {
                return this.tableNegativeInvoice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Temp_ArrearYearsSumDataTable Temp_ArrearYearsSum {
            get {
                return this.tableTemp_ArrearYearsSum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PowerIMSDataSet cln = ((PowerIMSDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Temp_MonthPowerFee"] != null)) {
                    base.Tables.Add(new Temp_MonthPowerFeeDataTable(ds.Tables["Temp_MonthPowerFee"]));
                }
                if ((ds.Tables["Temp_CAreaPower"] != null)) {
                    base.Tables.Add(new Temp_CAreaPowerDataTable(ds.Tables["Temp_CAreaPower"]));
                }
                if ((ds.Tables["Temp_LinePower"] != null)) {
                    base.Tables.Add(new Temp_LinePowerDataTable(ds.Tables["Temp_LinePower"]));
                }
                if ((ds.Tables["Temp_RAreaPower"] != null)) {
                    base.Tables.Add(new Temp_RAreaPowerDataTable(ds.Tables["Temp_RAreaPower"]));
                }
                if ((ds.Tables["Temp_HingePower"] != null)) {
                    base.Tables.Add(new Temp_HingePowerDataTable(ds.Tables["Temp_HingePower"]));
                }
                if ((ds.Tables["Temp_PowerFeeList"] != null)) {
                    base.Tables.Add(new Temp_PowerFeeListDataTable(ds.Tables["Temp_PowerFeeList"]));
                }
                if ((ds.Tables["V_Volumn_List1"] != null)) {
                    base.Tables.Add(new V_Volumn_List1DataTable(ds.Tables["V_Volumn_List1"]));
                }
                if ((ds.Tables["Temp_InvoiceTotal"] != null)) {
                    base.Tables.Add(new Temp_InvoiceTotalDataTable(ds.Tables["Temp_InvoiceTotal"]));
                }
                if ((ds.Tables["Temp_DayCharge"] != null)) {
                    base.Tables.Add(new Temp_DayChargeDataTable(ds.Tables["Temp_DayCharge"]));
                }
                if ((ds.Tables["Temp_MonthCharge"] != null)) {
                    base.Tables.Add(new Temp_MonthChargeDataTable(ds.Tables["Temp_MonthCharge"]));
                }
                if ((ds.Tables["Temp_CityArrear"] != null)) {
                    base.Tables.Add(new Temp_CityArrearDataTable(ds.Tables["Temp_CityArrear"]));
                }
                if ((ds.Tables["Temp_ArrearSum"] != null)) {
                    base.Tables.Add(new Temp_ArrearSumDataTable(ds.Tables["Temp_ArrearSum"]));
                }
                if ((ds.Tables["V_RuralOwe"] != null)) {
                    base.Tables.Add(new V_RuralOweDataTable(ds.Tables["V_RuralOwe"]));
                }
                if ((ds.Tables["NegativeInvoice"] != null)) {
                    base.Tables.Add(new NegativeInvoiceDataTable(ds.Tables["NegativeInvoice"]));
                }
                if ((ds.Tables["Temp_ArrearYearsSum"] != null)) {
                    base.Tables.Add(new Temp_ArrearYearsSumDataTable(ds.Tables["Temp_ArrearYearsSum"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTemp_MonthPowerFee = ((Temp_MonthPowerFeeDataTable)(base.Tables["Temp_MonthPowerFee"]));
            if ((initTable == true)) {
                if ((this.tableTemp_MonthPowerFee != null)) {
                    this.tableTemp_MonthPowerFee.InitVars();
                }
            }
            this.tableTemp_CAreaPower = ((Temp_CAreaPowerDataTable)(base.Tables["Temp_CAreaPower"]));
            if ((initTable == true)) {
                if ((this.tableTemp_CAreaPower != null)) {
                    this.tableTemp_CAreaPower.InitVars();
                }
            }
            this.tableTemp_LinePower = ((Temp_LinePowerDataTable)(base.Tables["Temp_LinePower"]));
            if ((initTable == true)) {
                if ((this.tableTemp_LinePower != null)) {
                    this.tableTemp_LinePower.InitVars();
                }
            }
            this.tableTemp_RAreaPower = ((Temp_RAreaPowerDataTable)(base.Tables["Temp_RAreaPower"]));
            if ((initTable == true)) {
                if ((this.tableTemp_RAreaPower != null)) {
                    this.tableTemp_RAreaPower.InitVars();
                }
            }
            this.tableTemp_HingePower = ((Temp_HingePowerDataTable)(base.Tables["Temp_HingePower"]));
            if ((initTable == true)) {
                if ((this.tableTemp_HingePower != null)) {
                    this.tableTemp_HingePower.InitVars();
                }
            }
            this.tableTemp_PowerFeeList = ((Temp_PowerFeeListDataTable)(base.Tables["Temp_PowerFeeList"]));
            if ((initTable == true)) {
                if ((this.tableTemp_PowerFeeList != null)) {
                    this.tableTemp_PowerFeeList.InitVars();
                }
            }
            this.tableV_Volumn_List1 = ((V_Volumn_List1DataTable)(base.Tables["V_Volumn_List1"]));
            if ((initTable == true)) {
                if ((this.tableV_Volumn_List1 != null)) {
                    this.tableV_Volumn_List1.InitVars();
                }
            }
            this.tableTemp_InvoiceTotal = ((Temp_InvoiceTotalDataTable)(base.Tables["Temp_InvoiceTotal"]));
            if ((initTable == true)) {
                if ((this.tableTemp_InvoiceTotal != null)) {
                    this.tableTemp_InvoiceTotal.InitVars();
                }
            }
            this.tableTemp_DayCharge = ((Temp_DayChargeDataTable)(base.Tables["Temp_DayCharge"]));
            if ((initTable == true)) {
                if ((this.tableTemp_DayCharge != null)) {
                    this.tableTemp_DayCharge.InitVars();
                }
            }
            this.tableTemp_MonthCharge = ((Temp_MonthChargeDataTable)(base.Tables["Temp_MonthCharge"]));
            if ((initTable == true)) {
                if ((this.tableTemp_MonthCharge != null)) {
                    this.tableTemp_MonthCharge.InitVars();
                }
            }
            this.tableTemp_CityArrear = ((Temp_CityArrearDataTable)(base.Tables["Temp_CityArrear"]));
            if ((initTable == true)) {
                if ((this.tableTemp_CityArrear != null)) {
                    this.tableTemp_CityArrear.InitVars();
                }
            }
            this.tableTemp_ArrearSum = ((Temp_ArrearSumDataTable)(base.Tables["Temp_ArrearSum"]));
            if ((initTable == true)) {
                if ((this.tableTemp_ArrearSum != null)) {
                    this.tableTemp_ArrearSum.InitVars();
                }
            }
            this.tableV_RuralOwe = ((V_RuralOweDataTable)(base.Tables["V_RuralOwe"]));
            if ((initTable == true)) {
                if ((this.tableV_RuralOwe != null)) {
                    this.tableV_RuralOwe.InitVars();
                }
            }
            this.tableNegativeInvoice = ((NegativeInvoiceDataTable)(base.Tables["NegativeInvoice"]));
            if ((initTable == true)) {
                if ((this.tableNegativeInvoice != null)) {
                    this.tableNegativeInvoice.InitVars();
                }
            }
            this.tableTemp_ArrearYearsSum = ((Temp_ArrearYearsSumDataTable)(base.Tables["Temp_ArrearYearsSum"]));
            if ((initTable == true)) {
                if ((this.tableTemp_ArrearYearsSum != null)) {
                    this.tableTemp_ArrearYearsSum.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PowerIMSDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PowerIMSDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTemp_MonthPowerFee = new Temp_MonthPowerFeeDataTable();
            base.Tables.Add(this.tableTemp_MonthPowerFee);
            this.tableTemp_CAreaPower = new Temp_CAreaPowerDataTable();
            base.Tables.Add(this.tableTemp_CAreaPower);
            this.tableTemp_LinePower = new Temp_LinePowerDataTable();
            base.Tables.Add(this.tableTemp_LinePower);
            this.tableTemp_RAreaPower = new Temp_RAreaPowerDataTable();
            base.Tables.Add(this.tableTemp_RAreaPower);
            this.tableTemp_HingePower = new Temp_HingePowerDataTable();
            base.Tables.Add(this.tableTemp_HingePower);
            this.tableTemp_PowerFeeList = new Temp_PowerFeeListDataTable();
            base.Tables.Add(this.tableTemp_PowerFeeList);
            this.tableV_Volumn_List1 = new V_Volumn_List1DataTable();
            base.Tables.Add(this.tableV_Volumn_List1);
            this.tableTemp_InvoiceTotal = new Temp_InvoiceTotalDataTable();
            base.Tables.Add(this.tableTemp_InvoiceTotal);
            this.tableTemp_DayCharge = new Temp_DayChargeDataTable();
            base.Tables.Add(this.tableTemp_DayCharge);
            this.tableTemp_MonthCharge = new Temp_MonthChargeDataTable();
            base.Tables.Add(this.tableTemp_MonthCharge);
            this.tableTemp_CityArrear = new Temp_CityArrearDataTable();
            base.Tables.Add(this.tableTemp_CityArrear);
            this.tableTemp_ArrearSum = new Temp_ArrearSumDataTable();
            base.Tables.Add(this.tableTemp_ArrearSum);
            this.tableV_RuralOwe = new V_RuralOweDataTable();
            base.Tables.Add(this.tableV_RuralOwe);
            this.tableNegativeInvoice = new NegativeInvoiceDataTable();
            base.Tables.Add(this.tableNegativeInvoice);
            this.tableTemp_ArrearYearsSum = new Temp_ArrearYearsSumDataTable();
            base.Tables.Add(this.tableTemp_ArrearYearsSum);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_MonthPowerFee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_CAreaPower() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_LinePower() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_RAreaPower() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_HingePower() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_PowerFeeList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_Volumn_List1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_InvoiceTotal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_DayCharge() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_MonthCharge() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_CityArrear() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_ArrearSum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_RuralOwe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNegativeInvoice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemp_ArrearYearsSum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PowerIMSDataSet ds = new PowerIMSDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Temp_MonthPowerFeeRowChangeEventHandler(object sender, Temp_MonthPowerFeeRowChangeEvent e);
        
        public delegate void Temp_CAreaPowerRowChangeEventHandler(object sender, Temp_CAreaPowerRowChangeEvent e);
        
        public delegate void Temp_LinePowerRowChangeEventHandler(object sender, Temp_LinePowerRowChangeEvent e);
        
        public delegate void Temp_RAreaPowerRowChangeEventHandler(object sender, Temp_RAreaPowerRowChangeEvent e);
        
        public delegate void Temp_HingePowerRowChangeEventHandler(object sender, Temp_HingePowerRowChangeEvent e);
        
        public delegate void Temp_PowerFeeListRowChangeEventHandler(object sender, Temp_PowerFeeListRowChangeEvent e);
        
        public delegate void V_Volumn_List1RowChangeEventHandler(object sender, V_Volumn_List1RowChangeEvent e);
        
        public delegate void Temp_InvoiceTotalRowChangeEventHandler(object sender, Temp_InvoiceTotalRowChangeEvent e);
        
        public delegate void Temp_DayChargeRowChangeEventHandler(object sender, Temp_DayChargeRowChangeEvent e);
        
        public delegate void Temp_MonthChargeRowChangeEventHandler(object sender, Temp_MonthChargeRowChangeEvent e);
        
        public delegate void Temp_CityArrearRowChangeEventHandler(object sender, Temp_CityArrearRowChangeEvent e);
        
        public delegate void Temp_ArrearSumRowChangeEventHandler(object sender, Temp_ArrearSumRowChangeEvent e);
        
        public delegate void V_RuralOweRowChangeEventHandler(object sender, V_RuralOweRowChangeEvent e);
        
        public delegate void NegativeInvoiceRowChangeEventHandler(object sender, NegativeInvoiceRowChangeEvent e);
        
        public delegate void Temp_ArrearYearsSumRowChangeEventHandler(object sender, Temp_ArrearYearsSumRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_MonthPowerFeeDataTable : global::System.Data.TypedTableBase<Temp_MonthPowerFeeRow> {
            
            private global::System.Data.DataColumn columnInvoiceType;
            
            private global::System.Data.DataColumn columnCountAmount;
            
            private global::System.Data.DataColumn columnRuralFeeD;
            
            private global::System.Data.DataColumn columnRuralFeeX;
            
            private global::System.Data.DataColumn columnCityFeeD;
            
            private global::System.Data.DataColumn columnCityFeeX;
            
            private global::System.Data.DataColumn columnBaseFee;
            
            private global::System.Data.DataColumn columnTotalFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeDataTable() {
                this.TableName = "Temp_MonthPowerFee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_MonthPowerFeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_MonthPowerFeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceTypeColumn {
                get {
                    return this.columnInvoiceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountAmountColumn {
                get {
                    return this.columnCountAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuralFeeDColumn {
                get {
                    return this.columnRuralFeeD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuralFeeXColumn {
                get {
                    return this.columnRuralFeeX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityFeeDColumn {
                get {
                    return this.columnCityFeeD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityFeeXColumn {
                get {
                    return this.columnCityFeeX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseFeeColumn {
                get {
                    return this.columnBaseFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFeeColumn {
                get {
                    return this.columnTotalFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeRow this[int index] {
                get {
                    return ((Temp_MonthPowerFeeRow)(this.Rows[index]));
                }
            }
            
            public event Temp_MonthPowerFeeRowChangeEventHandler Temp_MonthPowerFeeRowChanging;
            
            public event Temp_MonthPowerFeeRowChangeEventHandler Temp_MonthPowerFeeRowChanged;
            
            public event Temp_MonthPowerFeeRowChangeEventHandler Temp_MonthPowerFeeRowDeleting;
            
            public event Temp_MonthPowerFeeRowChangeEventHandler Temp_MonthPowerFeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_MonthPowerFeeRow(Temp_MonthPowerFeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeRow AddTemp_MonthPowerFeeRow(string InvoiceType, float CountAmount, float RuralFeeD, float RuralFeeX, float CityFeeD, float CityFeeX, float BaseFee, float TotalFee) {
                Temp_MonthPowerFeeRow rowTemp_MonthPowerFeeRow = ((Temp_MonthPowerFeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InvoiceType,
                        CountAmount,
                        RuralFeeD,
                        RuralFeeX,
                        CityFeeD,
                        CityFeeX,
                        BaseFee,
                        TotalFee};
                rowTemp_MonthPowerFeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_MonthPowerFeeRow);
                return rowTemp_MonthPowerFeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_MonthPowerFeeDataTable cln = ((Temp_MonthPowerFeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_MonthPowerFeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvoiceType = base.Columns["InvoiceType"];
                this.columnCountAmount = base.Columns["CountAmount"];
                this.columnRuralFeeD = base.Columns["RuralFeeD"];
                this.columnRuralFeeX = base.Columns["RuralFeeX"];
                this.columnCityFeeD = base.Columns["CityFeeD"];
                this.columnCityFeeX = base.Columns["CityFeeX"];
                this.columnBaseFee = base.Columns["BaseFee"];
                this.columnTotalFee = base.Columns["TotalFee"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvoiceType = new global::System.Data.DataColumn("InvoiceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceType);
                this.columnCountAmount = new global::System.Data.DataColumn("CountAmount", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountAmount);
                this.columnRuralFeeD = new global::System.Data.DataColumn("RuralFeeD", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuralFeeD);
                this.columnRuralFeeX = new global::System.Data.DataColumn("RuralFeeX", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuralFeeX);
                this.columnCityFeeD = new global::System.Data.DataColumn("CityFeeD", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityFeeD);
                this.columnCityFeeX = new global::System.Data.DataColumn("CityFeeX", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityFeeX);
                this.columnBaseFee = new global::System.Data.DataColumn("BaseFee", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseFee);
                this.columnTotalFee = new global::System.Data.DataColumn("TotalFee", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFee);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeRow NewTemp_MonthPowerFeeRow() {
                return ((Temp_MonthPowerFeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_MonthPowerFeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_MonthPowerFeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_MonthPowerFeeRowChanged != null)) {
                    this.Temp_MonthPowerFeeRowChanged(this, new Temp_MonthPowerFeeRowChangeEvent(((Temp_MonthPowerFeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_MonthPowerFeeRowChanging != null)) {
                    this.Temp_MonthPowerFeeRowChanging(this, new Temp_MonthPowerFeeRowChangeEvent(((Temp_MonthPowerFeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_MonthPowerFeeRowDeleted != null)) {
                    this.Temp_MonthPowerFeeRowDeleted(this, new Temp_MonthPowerFeeRowChangeEvent(((Temp_MonthPowerFeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_MonthPowerFeeRowDeleting != null)) {
                    this.Temp_MonthPowerFeeRowDeleting(this, new Temp_MonthPowerFeeRowChangeEvent(((Temp_MonthPowerFeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_MonthPowerFeeRow(Temp_MonthPowerFeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_MonthPowerFeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_CAreaPowerDataTable : global::System.Data.TypedTableBase<Temp_CAreaPowerRow> {
            
            private global::System.Data.DataColumn columnAreaName;
            
            private global::System.Data.DataColumn columnbackPower;
            
            private global::System.Data.DataColumn columnTotalbackPower;
            
            private global::System.Data.DataColumn columnofferPower;
            
            private global::System.Data.DataColumn columnTotalOfferPower;
            
            private global::System.Data.DataColumn columnmonthPercent;
            
            private global::System.Data.DataColumn columnTotalPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerDataTable() {
                this.TableName = "Temp_CAreaPower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_CAreaPowerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_CAreaPowerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaNameColumn {
                get {
                    return this.columnAreaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn backPowerColumn {
                get {
                    return this.columnbackPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalbackPowerColumn {
                get {
                    return this.columnTotalbackPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn offerPowerColumn {
                get {
                    return this.columnofferPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOfferPowerColumn {
                get {
                    return this.columnTotalOfferPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn monthPercentColumn {
                get {
                    return this.columnmonthPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPercentColumn {
                get {
                    return this.columnTotalPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerRow this[int index] {
                get {
                    return ((Temp_CAreaPowerRow)(this.Rows[index]));
                }
            }
            
            public event Temp_CAreaPowerRowChangeEventHandler Temp_CAreaPowerRowChanging;
            
            public event Temp_CAreaPowerRowChangeEventHandler Temp_CAreaPowerRowChanged;
            
            public event Temp_CAreaPowerRowChangeEventHandler Temp_CAreaPowerRowDeleting;
            
            public event Temp_CAreaPowerRowChangeEventHandler Temp_CAreaPowerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_CAreaPowerRow(Temp_CAreaPowerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerRow AddTemp_CAreaPowerRow(string AreaName, float backPower, float TotalbackPower, float offerPower, float TotalOfferPower, float monthPercent, float TotalPercent) {
                Temp_CAreaPowerRow rowTemp_CAreaPowerRow = ((Temp_CAreaPowerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AreaName,
                        backPower,
                        TotalbackPower,
                        offerPower,
                        TotalOfferPower,
                        monthPercent,
                        TotalPercent};
                rowTemp_CAreaPowerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_CAreaPowerRow);
                return rowTemp_CAreaPowerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_CAreaPowerDataTable cln = ((Temp_CAreaPowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_CAreaPowerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAreaName = base.Columns["AreaName"];
                this.columnbackPower = base.Columns["backPower"];
                this.columnTotalbackPower = base.Columns["TotalbackPower"];
                this.columnofferPower = base.Columns["offerPower"];
                this.columnTotalOfferPower = base.Columns["TotalOfferPower"];
                this.columnmonthPercent = base.Columns["monthPercent"];
                this.columnTotalPercent = base.Columns["TotalPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAreaName = new global::System.Data.DataColumn("AreaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaName);
                this.columnbackPower = new global::System.Data.DataColumn("backPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbackPower);
                this.columnTotalbackPower = new global::System.Data.DataColumn("TotalbackPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalbackPower);
                this.columnofferPower = new global::System.Data.DataColumn("offerPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnofferPower);
                this.columnTotalOfferPower = new global::System.Data.DataColumn("TotalOfferPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOfferPower);
                this.columnmonthPercent = new global::System.Data.DataColumn("monthPercent", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmonthPercent);
                this.columnTotalPercent = new global::System.Data.DataColumn("TotalPercent", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerRow NewTemp_CAreaPowerRow() {
                return ((Temp_CAreaPowerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_CAreaPowerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_CAreaPowerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_CAreaPowerRowChanged != null)) {
                    this.Temp_CAreaPowerRowChanged(this, new Temp_CAreaPowerRowChangeEvent(((Temp_CAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_CAreaPowerRowChanging != null)) {
                    this.Temp_CAreaPowerRowChanging(this, new Temp_CAreaPowerRowChangeEvent(((Temp_CAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_CAreaPowerRowDeleted != null)) {
                    this.Temp_CAreaPowerRowDeleted(this, new Temp_CAreaPowerRowChangeEvent(((Temp_CAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_CAreaPowerRowDeleting != null)) {
                    this.Temp_CAreaPowerRowDeleting(this, new Temp_CAreaPowerRowChangeEvent(((Temp_CAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_CAreaPowerRow(Temp_CAreaPowerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_CAreaPowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_LinePowerDataTable : global::System.Data.TypedTableBase<Temp_LinePowerRow> {
            
            private global::System.Data.DataColumn columnLineName;
            
            private global::System.Data.DataColumn columnOfferPower;
            
            private global::System.Data.DataColumn columnBackPower1;
            
            private global::System.Data.DataColumn columnBackPower2;
            
            private global::System.Data.DataColumn columnBackPower3;
            
            private global::System.Data.DataColumn columnBackPower4;
            
            private global::System.Data.DataColumn columnBackPower5;
            
            private global::System.Data.DataColumn columnBackPower6;
            
            private global::System.Data.DataColumn columnBackPower7;
            
            private global::System.Data.DataColumn columnBackPower8;
            
            private global::System.Data.DataColumn columnBackPower9;
            
            private global::System.Data.DataColumn columnBackPower10;
            
            private global::System.Data.DataColumn columnBackPower11;
            
            private global::System.Data.DataColumn columnSumBackPower;
            
            private global::System.Data.DataColumn columnSumPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerDataTable() {
                this.TableName = "Temp_LinePower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_LinePowerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_LinePowerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineNameColumn {
                get {
                    return this.columnLineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OfferPowerColumn {
                get {
                    return this.columnOfferPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower1Column {
                get {
                    return this.columnBackPower1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower2Column {
                get {
                    return this.columnBackPower2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower3Column {
                get {
                    return this.columnBackPower3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower4Column {
                get {
                    return this.columnBackPower4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower5Column {
                get {
                    return this.columnBackPower5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower6Column {
                get {
                    return this.columnBackPower6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower7Column {
                get {
                    return this.columnBackPower7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower8Column {
                get {
                    return this.columnBackPower8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower9Column {
                get {
                    return this.columnBackPower9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower10Column {
                get {
                    return this.columnBackPower10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower11Column {
                get {
                    return this.columnBackPower11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumBackPowerColumn {
                get {
                    return this.columnSumBackPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumPercentColumn {
                get {
                    return this.columnSumPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerRow this[int index] {
                get {
                    return ((Temp_LinePowerRow)(this.Rows[index]));
                }
            }
            
            public event Temp_LinePowerRowChangeEventHandler Temp_LinePowerRowChanging;
            
            public event Temp_LinePowerRowChangeEventHandler Temp_LinePowerRowChanged;
            
            public event Temp_LinePowerRowChangeEventHandler Temp_LinePowerRowDeleting;
            
            public event Temp_LinePowerRowChangeEventHandler Temp_LinePowerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_LinePowerRow(Temp_LinePowerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerRow AddTemp_LinePowerRow(string LineName, float OfferPower, float BackPower1, float BackPower2, float BackPower3, float BackPower4, float BackPower5, float BackPower6, float BackPower7, float BackPower8, float BackPower9, float BackPower10, float BackPower11, float SumBackPower, float SumPercent) {
                Temp_LinePowerRow rowTemp_LinePowerRow = ((Temp_LinePowerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LineName,
                        OfferPower,
                        BackPower1,
                        BackPower2,
                        BackPower3,
                        BackPower4,
                        BackPower5,
                        BackPower6,
                        BackPower7,
                        BackPower8,
                        BackPower9,
                        BackPower10,
                        BackPower11,
                        SumBackPower,
                        SumPercent};
                rowTemp_LinePowerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_LinePowerRow);
                return rowTemp_LinePowerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_LinePowerDataTable cln = ((Temp_LinePowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_LinePowerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineName = base.Columns["LineName"];
                this.columnOfferPower = base.Columns["OfferPower"];
                this.columnBackPower1 = base.Columns["BackPower1"];
                this.columnBackPower2 = base.Columns["BackPower2"];
                this.columnBackPower3 = base.Columns["BackPower3"];
                this.columnBackPower4 = base.Columns["BackPower4"];
                this.columnBackPower5 = base.Columns["BackPower5"];
                this.columnBackPower6 = base.Columns["BackPower6"];
                this.columnBackPower7 = base.Columns["BackPower7"];
                this.columnBackPower8 = base.Columns["BackPower8"];
                this.columnBackPower9 = base.Columns["BackPower9"];
                this.columnBackPower10 = base.Columns["BackPower10"];
                this.columnBackPower11 = base.Columns["BackPower11"];
                this.columnSumBackPower = base.Columns["SumBackPower"];
                this.columnSumPercent = base.Columns["SumPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineName = new global::System.Data.DataColumn("LineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineName);
                this.columnOfferPower = new global::System.Data.DataColumn("OfferPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfferPower);
                this.columnBackPower1 = new global::System.Data.DataColumn("BackPower1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower1);
                this.columnBackPower2 = new global::System.Data.DataColumn("BackPower2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower2);
                this.columnBackPower3 = new global::System.Data.DataColumn("BackPower3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower3);
                this.columnBackPower4 = new global::System.Data.DataColumn("BackPower4", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower4);
                this.columnBackPower5 = new global::System.Data.DataColumn("BackPower5", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower5);
                this.columnBackPower6 = new global::System.Data.DataColumn("BackPower6", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower6);
                this.columnBackPower7 = new global::System.Data.DataColumn("BackPower7", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower7);
                this.columnBackPower8 = new global::System.Data.DataColumn("BackPower8", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower8);
                this.columnBackPower9 = new global::System.Data.DataColumn("BackPower9", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower9);
                this.columnBackPower10 = new global::System.Data.DataColumn("BackPower10", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower10);
                this.columnBackPower11 = new global::System.Data.DataColumn("BackPower11", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower11);
                this.columnSumBackPower = new global::System.Data.DataColumn("SumBackPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumBackPower);
                this.columnSumPercent = new global::System.Data.DataColumn("SumPercent", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerRow NewTemp_LinePowerRow() {
                return ((Temp_LinePowerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_LinePowerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_LinePowerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_LinePowerRowChanged != null)) {
                    this.Temp_LinePowerRowChanged(this, new Temp_LinePowerRowChangeEvent(((Temp_LinePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_LinePowerRowChanging != null)) {
                    this.Temp_LinePowerRowChanging(this, new Temp_LinePowerRowChangeEvent(((Temp_LinePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_LinePowerRowDeleted != null)) {
                    this.Temp_LinePowerRowDeleted(this, new Temp_LinePowerRowChangeEvent(((Temp_LinePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_LinePowerRowDeleting != null)) {
                    this.Temp_LinePowerRowDeleting(this, new Temp_LinePowerRowChangeEvent(((Temp_LinePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_LinePowerRow(Temp_LinePowerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_LinePowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_RAreaPowerDataTable : global::System.Data.TypedTableBase<Temp_RAreaPowerRow> {
            
            private global::System.Data.DataColumn columnRAreaNo;
            
            private global::System.Data.DataColumn columnOfferPower;
            
            private global::System.Data.DataColumn columnBackPower1;
            
            private global::System.Data.DataColumn columnBackPower2;
            
            private global::System.Data.DataColumn columnBackPower3;
            
            private global::System.Data.DataColumn columnBackPower4;
            
            private global::System.Data.DataColumn columnBackPower5;
            
            private global::System.Data.DataColumn columnBackPower6;
            
            private global::System.Data.DataColumn columnBackPower7;
            
            private global::System.Data.DataColumn columnBackPower8;
            
            private global::System.Data.DataColumn columnBackPower9;
            
            private global::System.Data.DataColumn columnBackPower10;
            
            private global::System.Data.DataColumn columnBackPower11;
            
            private global::System.Data.DataColumn columnSumBackPower;
            
            private global::System.Data.DataColumn columnSumPercent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerDataTable() {
                this.TableName = "Temp_RAreaPower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_RAreaPowerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_RAreaPowerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RAreaNoColumn {
                get {
                    return this.columnRAreaNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OfferPowerColumn {
                get {
                    return this.columnOfferPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower1Column {
                get {
                    return this.columnBackPower1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower2Column {
                get {
                    return this.columnBackPower2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower3Column {
                get {
                    return this.columnBackPower3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower4Column {
                get {
                    return this.columnBackPower4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower5Column {
                get {
                    return this.columnBackPower5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower6Column {
                get {
                    return this.columnBackPower6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower7Column {
                get {
                    return this.columnBackPower7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower8Column {
                get {
                    return this.columnBackPower8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower9Column {
                get {
                    return this.columnBackPower9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower10Column {
                get {
                    return this.columnBackPower10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackPower11Column {
                get {
                    return this.columnBackPower11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumBackPowerColumn {
                get {
                    return this.columnSumBackPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumPercentColumn {
                get {
                    return this.columnSumPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerRow this[int index] {
                get {
                    return ((Temp_RAreaPowerRow)(this.Rows[index]));
                }
            }
            
            public event Temp_RAreaPowerRowChangeEventHandler Temp_RAreaPowerRowChanging;
            
            public event Temp_RAreaPowerRowChangeEventHandler Temp_RAreaPowerRowChanged;
            
            public event Temp_RAreaPowerRowChangeEventHandler Temp_RAreaPowerRowDeleting;
            
            public event Temp_RAreaPowerRowChangeEventHandler Temp_RAreaPowerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_RAreaPowerRow(Temp_RAreaPowerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerRow AddTemp_RAreaPowerRow(string RAreaNo, float OfferPower, float BackPower1, float BackPower2, float BackPower3, float BackPower4, float BackPower5, float BackPower6, float BackPower7, float BackPower8, float BackPower9, float BackPower10, float BackPower11, float SumBackPower, float SumPercent) {
                Temp_RAreaPowerRow rowTemp_RAreaPowerRow = ((Temp_RAreaPowerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RAreaNo,
                        OfferPower,
                        BackPower1,
                        BackPower2,
                        BackPower3,
                        BackPower4,
                        BackPower5,
                        BackPower6,
                        BackPower7,
                        BackPower8,
                        BackPower9,
                        BackPower10,
                        BackPower11,
                        SumBackPower,
                        SumPercent};
                rowTemp_RAreaPowerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_RAreaPowerRow);
                return rowTemp_RAreaPowerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_RAreaPowerDataTable cln = ((Temp_RAreaPowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_RAreaPowerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRAreaNo = base.Columns["RAreaNo"];
                this.columnOfferPower = base.Columns["OfferPower"];
                this.columnBackPower1 = base.Columns["BackPower1"];
                this.columnBackPower2 = base.Columns["BackPower2"];
                this.columnBackPower3 = base.Columns["BackPower3"];
                this.columnBackPower4 = base.Columns["BackPower4"];
                this.columnBackPower5 = base.Columns["BackPower5"];
                this.columnBackPower6 = base.Columns["BackPower6"];
                this.columnBackPower7 = base.Columns["BackPower7"];
                this.columnBackPower8 = base.Columns["BackPower8"];
                this.columnBackPower9 = base.Columns["BackPower9"];
                this.columnBackPower10 = base.Columns["BackPower10"];
                this.columnBackPower11 = base.Columns["BackPower11"];
                this.columnSumBackPower = base.Columns["SumBackPower"];
                this.columnSumPercent = base.Columns["SumPercent"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRAreaNo = new global::System.Data.DataColumn("RAreaNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAreaNo);
                this.columnOfferPower = new global::System.Data.DataColumn("OfferPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfferPower);
                this.columnBackPower1 = new global::System.Data.DataColumn("BackPower1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower1);
                this.columnBackPower2 = new global::System.Data.DataColumn("BackPower2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower2);
                this.columnBackPower3 = new global::System.Data.DataColumn("BackPower3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower3);
                this.columnBackPower4 = new global::System.Data.DataColumn("BackPower4", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower4);
                this.columnBackPower5 = new global::System.Data.DataColumn("BackPower5", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower5);
                this.columnBackPower6 = new global::System.Data.DataColumn("BackPower6", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower6);
                this.columnBackPower7 = new global::System.Data.DataColumn("BackPower7", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower7);
                this.columnBackPower8 = new global::System.Data.DataColumn("BackPower8", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower8);
                this.columnBackPower9 = new global::System.Data.DataColumn("BackPower9", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower9);
                this.columnBackPower10 = new global::System.Data.DataColumn("BackPower10", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower10);
                this.columnBackPower11 = new global::System.Data.DataColumn("BackPower11", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackPower11);
                this.columnSumBackPower = new global::System.Data.DataColumn("SumBackPower", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumBackPower);
                this.columnSumPercent = new global::System.Data.DataColumn("SumPercent", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumPercent);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerRow NewTemp_RAreaPowerRow() {
                return ((Temp_RAreaPowerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_RAreaPowerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_RAreaPowerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_RAreaPowerRowChanged != null)) {
                    this.Temp_RAreaPowerRowChanged(this, new Temp_RAreaPowerRowChangeEvent(((Temp_RAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_RAreaPowerRowChanging != null)) {
                    this.Temp_RAreaPowerRowChanging(this, new Temp_RAreaPowerRowChangeEvent(((Temp_RAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_RAreaPowerRowDeleted != null)) {
                    this.Temp_RAreaPowerRowDeleted(this, new Temp_RAreaPowerRowChangeEvent(((Temp_RAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_RAreaPowerRowDeleting != null)) {
                    this.Temp_RAreaPowerRowDeleting(this, new Temp_RAreaPowerRowChangeEvent(((Temp_RAreaPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_RAreaPowerRow(Temp_RAreaPowerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_RAreaPowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_HingePowerDataTable : global::System.Data.TypedTableBase<Temp_HingePowerRow> {
            
            private global::System.Data.DataColumn columnCustomerNo;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnCountFeeAmount;
            
            private global::System.Data.DataColumn columnTotalMoney;
            
            private global::System.Data.DataColumn columnsumCountFeeAmount;
            
            private global::System.Data.DataColumn columnsumTotalMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerDataTable() {
                this.TableName = "Temp_HingePower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_HingePowerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_HingePowerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNoColumn {
                get {
                    return this.columnCustomerNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeAmountColumn {
                get {
                    return this.columnCountFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoneyColumn {
                get {
                    return this.columnTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumCountFeeAmountColumn {
                get {
                    return this.columnsumCountFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumTotalMoneyColumn {
                get {
                    return this.columnsumTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerRow this[int index] {
                get {
                    return ((Temp_HingePowerRow)(this.Rows[index]));
                }
            }
            
            public event Temp_HingePowerRowChangeEventHandler Temp_HingePowerRowChanging;
            
            public event Temp_HingePowerRowChangeEventHandler Temp_HingePowerRowChanged;
            
            public event Temp_HingePowerRowChangeEventHandler Temp_HingePowerRowDeleting;
            
            public event Temp_HingePowerRowChangeEventHandler Temp_HingePowerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_HingePowerRow(Temp_HingePowerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerRow AddTemp_HingePowerRow(string CustomerNo, string CustomerName, float CountFeeAmount, float TotalMoney, float sumCountFeeAmount, float sumTotalMoney) {
                Temp_HingePowerRow rowTemp_HingePowerRow = ((Temp_HingePowerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerNo,
                        CustomerName,
                        CountFeeAmount,
                        TotalMoney,
                        sumCountFeeAmount,
                        sumTotalMoney};
                rowTemp_HingePowerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_HingePowerRow);
                return rowTemp_HingePowerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_HingePowerDataTable cln = ((Temp_HingePowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_HingePowerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerNo = base.Columns["CustomerNo"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnCountFeeAmount = base.Columns["CountFeeAmount"];
                this.columnTotalMoney = base.Columns["TotalMoney"];
                this.columnsumCountFeeAmount = base.Columns["sumCountFeeAmount"];
                this.columnsumTotalMoney = base.Columns["sumTotalMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerNo = new global::System.Data.DataColumn("CustomerNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnCountFeeAmount = new global::System.Data.DataColumn("CountFeeAmount", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeAmount);
                this.columnTotalMoney = new global::System.Data.DataColumn("TotalMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney);
                this.columnsumCountFeeAmount = new global::System.Data.DataColumn("sumCountFeeAmount", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumCountFeeAmount);
                this.columnsumTotalMoney = new global::System.Data.DataColumn("sumTotalMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumTotalMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerRow NewTemp_HingePowerRow() {
                return ((Temp_HingePowerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_HingePowerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_HingePowerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_HingePowerRowChanged != null)) {
                    this.Temp_HingePowerRowChanged(this, new Temp_HingePowerRowChangeEvent(((Temp_HingePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_HingePowerRowChanging != null)) {
                    this.Temp_HingePowerRowChanging(this, new Temp_HingePowerRowChangeEvent(((Temp_HingePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_HingePowerRowDeleted != null)) {
                    this.Temp_HingePowerRowDeleted(this, new Temp_HingePowerRowChangeEvent(((Temp_HingePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_HingePowerRowDeleting != null)) {
                    this.Temp_HingePowerRowDeleting(this, new Temp_HingePowerRowChangeEvent(((Temp_HingePowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_HingePowerRow(Temp_HingePowerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_HingePowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_PowerFeeListDataTable : global::System.Data.TypedTableBase<Temp_PowerFeeListRow> {
            
            private global::System.Data.DataColumn columnIndex1;
            
            private global::System.Data.DataColumn columnCustomerNo1;
            
            private global::System.Data.DataColumn columnCustomerName1;
            
            private global::System.Data.DataColumn columnStartCode1;
            
            private global::System.Data.DataColumn columnEndCode1;
            
            private global::System.Data.DataColumn columnCountFeeAmount1;
            
            private global::System.Data.DataColumn columnTotalMoney1;
            
            private global::System.Data.DataColumn columnIndex2;
            
            private global::System.Data.DataColumn columnCustomerNo2;
            
            private global::System.Data.DataColumn columnCustomerName2;
            
            private global::System.Data.DataColumn columnStartCode2;
            
            private global::System.Data.DataColumn columnEndCode2;
            
            private global::System.Data.DataColumn columnCountFeeAmount2;
            
            private global::System.Data.DataColumn columnTotalMoney2;
            
            private global::System.Data.DataColumn columnCustomerNo3;
            
            private global::System.Data.DataColumn columnCustomerName3;
            
            private global::System.Data.DataColumn columnStartCode3;
            
            private global::System.Data.DataColumn columnEndCode3;
            
            private global::System.Data.DataColumn columnCountFeeAmount3;
            
            private global::System.Data.DataColumn columnTotalMoney3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListDataTable() {
                this.TableName = "Temp_PowerFeeList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_PowerFeeListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_PowerFeeListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index1Column {
                get {
                    return this.columnIndex1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNo1Column {
                get {
                    return this.columnCustomerNo1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerName1Column {
                get {
                    return this.columnCustomerName1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartCode1Column {
                get {
                    return this.columnStartCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndCode1Column {
                get {
                    return this.columnEndCode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeAmount1Column {
                get {
                    return this.columnCountFeeAmount1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoney1Column {
                get {
                    return this.columnTotalMoney1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Index2Column {
                get {
                    return this.columnIndex2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNo2Column {
                get {
                    return this.columnCustomerNo2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerName2Column {
                get {
                    return this.columnCustomerName2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartCode2Column {
                get {
                    return this.columnStartCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndCode2Column {
                get {
                    return this.columnEndCode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeAmount2Column {
                get {
                    return this.columnCountFeeAmount2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoney2Column {
                get {
                    return this.columnTotalMoney2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNo3Column {
                get {
                    return this.columnCustomerNo3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerName3Column {
                get {
                    return this.columnCustomerName3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartCode3Column {
                get {
                    return this.columnStartCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndCode3Column {
                get {
                    return this.columnEndCode3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeAmount3Column {
                get {
                    return this.columnCountFeeAmount3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoney3Column {
                get {
                    return this.columnTotalMoney3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListRow this[int index] {
                get {
                    return ((Temp_PowerFeeListRow)(this.Rows[index]));
                }
            }
            
            public event Temp_PowerFeeListRowChangeEventHandler Temp_PowerFeeListRowChanging;
            
            public event Temp_PowerFeeListRowChangeEventHandler Temp_PowerFeeListRowChanged;
            
            public event Temp_PowerFeeListRowChangeEventHandler Temp_PowerFeeListRowDeleting;
            
            public event Temp_PowerFeeListRowChangeEventHandler Temp_PowerFeeListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_PowerFeeListRow(Temp_PowerFeeListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListRow AddTemp_PowerFeeListRow(
                        string Index1, 
                        string CustomerNo1, 
                        string CustomerName1, 
                        float StartCode1, 
                        float EndCode1, 
                        float CountFeeAmount1, 
                        float TotalMoney1, 
                        string Index2, 
                        string CustomerNo2, 
                        string CustomerName2, 
                        float StartCode2, 
                        float EndCode2, 
                        float CountFeeAmount2, 
                        float TotalMoney2, 
                        string CustomerNo3, 
                        string CustomerName3, 
                        float StartCode3, 
                        float EndCode3, 
                        float CountFeeAmount3, 
                        float TotalMoney3) {
                Temp_PowerFeeListRow rowTemp_PowerFeeListRow = ((Temp_PowerFeeListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Index1,
                        CustomerNo1,
                        CustomerName1,
                        StartCode1,
                        EndCode1,
                        CountFeeAmount1,
                        TotalMoney1,
                        Index2,
                        CustomerNo2,
                        CustomerName2,
                        StartCode2,
                        EndCode2,
                        CountFeeAmount2,
                        TotalMoney2,
                        CustomerNo3,
                        CustomerName3,
                        StartCode3,
                        EndCode3,
                        CountFeeAmount3,
                        TotalMoney3};
                rowTemp_PowerFeeListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_PowerFeeListRow);
                return rowTemp_PowerFeeListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_PowerFeeListDataTable cln = ((Temp_PowerFeeListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_PowerFeeListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndex1 = base.Columns["Index1"];
                this.columnCustomerNo1 = base.Columns["CustomerNo1"];
                this.columnCustomerName1 = base.Columns["CustomerName1"];
                this.columnStartCode1 = base.Columns["StartCode1"];
                this.columnEndCode1 = base.Columns["EndCode1"];
                this.columnCountFeeAmount1 = base.Columns["CountFeeAmount1"];
                this.columnTotalMoney1 = base.Columns["TotalMoney1"];
                this.columnIndex2 = base.Columns["Index2"];
                this.columnCustomerNo2 = base.Columns["CustomerNo2"];
                this.columnCustomerName2 = base.Columns["CustomerName2"];
                this.columnStartCode2 = base.Columns["StartCode2"];
                this.columnEndCode2 = base.Columns["EndCode2"];
                this.columnCountFeeAmount2 = base.Columns["CountFeeAmount2"];
                this.columnTotalMoney2 = base.Columns["TotalMoney2"];
                this.columnCustomerNo3 = base.Columns["CustomerNo3"];
                this.columnCustomerName3 = base.Columns["CustomerName3"];
                this.columnStartCode3 = base.Columns["StartCode3"];
                this.columnEndCode3 = base.Columns["EndCode3"];
                this.columnCountFeeAmount3 = base.Columns["CountFeeAmount3"];
                this.columnTotalMoney3 = base.Columns["TotalMoney3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndex1 = new global::System.Data.DataColumn("Index1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex1);
                this.columnCustomerNo1 = new global::System.Data.DataColumn("CustomerNo1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo1);
                this.columnCustomerName1 = new global::System.Data.DataColumn("CustomerName1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName1);
                this.columnStartCode1 = new global::System.Data.DataColumn("StartCode1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartCode1);
                this.columnEndCode1 = new global::System.Data.DataColumn("EndCode1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndCode1);
                this.columnCountFeeAmount1 = new global::System.Data.DataColumn("CountFeeAmount1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeAmount1);
                this.columnTotalMoney1 = new global::System.Data.DataColumn("TotalMoney1", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney1);
                this.columnIndex2 = new global::System.Data.DataColumn("Index2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex2);
                this.columnCustomerNo2 = new global::System.Data.DataColumn("CustomerNo2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo2);
                this.columnCustomerName2 = new global::System.Data.DataColumn("CustomerName2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName2);
                this.columnStartCode2 = new global::System.Data.DataColumn("StartCode2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartCode2);
                this.columnEndCode2 = new global::System.Data.DataColumn("EndCode2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndCode2);
                this.columnCountFeeAmount2 = new global::System.Data.DataColumn("CountFeeAmount2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeAmount2);
                this.columnTotalMoney2 = new global::System.Data.DataColumn("TotalMoney2", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney2);
                this.columnCustomerNo3 = new global::System.Data.DataColumn("CustomerNo3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo3);
                this.columnCustomerName3 = new global::System.Data.DataColumn("CustomerName3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName3);
                this.columnStartCode3 = new global::System.Data.DataColumn("StartCode3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartCode3);
                this.columnEndCode3 = new global::System.Data.DataColumn("EndCode3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndCode3);
                this.columnCountFeeAmount3 = new global::System.Data.DataColumn("CountFeeAmount3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeAmount3);
                this.columnTotalMoney3 = new global::System.Data.DataColumn("TotalMoney3", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney3);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListRow NewTemp_PowerFeeListRow() {
                return ((Temp_PowerFeeListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_PowerFeeListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_PowerFeeListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_PowerFeeListRowChanged != null)) {
                    this.Temp_PowerFeeListRowChanged(this, new Temp_PowerFeeListRowChangeEvent(((Temp_PowerFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_PowerFeeListRowChanging != null)) {
                    this.Temp_PowerFeeListRowChanging(this, new Temp_PowerFeeListRowChangeEvent(((Temp_PowerFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_PowerFeeListRowDeleted != null)) {
                    this.Temp_PowerFeeListRowDeleted(this, new Temp_PowerFeeListRowChangeEvent(((Temp_PowerFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_PowerFeeListRowDeleting != null)) {
                    this.Temp_PowerFeeListRowDeleting(this, new Temp_PowerFeeListRowChangeEvent(((Temp_PowerFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_PowerFeeListRow(Temp_PowerFeeListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_PowerFeeListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_Volumn_List1DataTable : global::System.Data.TypedTableBase<V_Volumn_List1Row> {
            
            private global::System.Data.DataColumn columnVolumnNo;
            
            private global::System.Data.DataColumn columnCountNum;
            
            private global::System.Data.DataColumn columnCountFeeAmount;
            
            private global::System.Data.DataColumn columnTotalMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1DataTable() {
                this.TableName = "V_Volumn_List1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_Volumn_List1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_Volumn_List1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VolumnNoColumn {
                get {
                    return this.columnVolumnNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountNumColumn {
                get {
                    return this.columnCountNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeAmountColumn {
                get {
                    return this.columnCountFeeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoneyColumn {
                get {
                    return this.columnTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1Row this[int index] {
                get {
                    return ((V_Volumn_List1Row)(this.Rows[index]));
                }
            }
            
            public event V_Volumn_List1RowChangeEventHandler V_Volumn_List1RowChanging;
            
            public event V_Volumn_List1RowChangeEventHandler V_Volumn_List1RowChanged;
            
            public event V_Volumn_List1RowChangeEventHandler V_Volumn_List1RowDeleting;
            
            public event V_Volumn_List1RowChangeEventHandler V_Volumn_List1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_Volumn_List1Row(V_Volumn_List1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1Row AddV_Volumn_List1Row(string VolumnNo, float CountNum, float CountFeeAmount, float TotalMoney) {
                V_Volumn_List1Row rowV_Volumn_List1Row = ((V_Volumn_List1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        VolumnNo,
                        CountNum,
                        CountFeeAmount,
                        TotalMoney};
                rowV_Volumn_List1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_Volumn_List1Row);
                return rowV_Volumn_List1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_Volumn_List1DataTable cln = ((V_Volumn_List1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_Volumn_List1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVolumnNo = base.Columns["VolumnNo"];
                this.columnCountNum = base.Columns["CountNum"];
                this.columnCountFeeAmount = base.Columns["CountFeeAmount"];
                this.columnTotalMoney = base.Columns["TotalMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVolumnNo = new global::System.Data.DataColumn("VolumnNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVolumnNo);
                this.columnCountNum = new global::System.Data.DataColumn("CountNum", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountNum);
                this.columnCountFeeAmount = new global::System.Data.DataColumn("CountFeeAmount", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeAmount);
                this.columnTotalMoney = new global::System.Data.DataColumn("TotalMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1Row NewV_Volumn_List1Row() {
                return ((V_Volumn_List1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_Volumn_List1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_Volumn_List1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_Volumn_List1RowChanged != null)) {
                    this.V_Volumn_List1RowChanged(this, new V_Volumn_List1RowChangeEvent(((V_Volumn_List1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_Volumn_List1RowChanging != null)) {
                    this.V_Volumn_List1RowChanging(this, new V_Volumn_List1RowChangeEvent(((V_Volumn_List1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_Volumn_List1RowDeleted != null)) {
                    this.V_Volumn_List1RowDeleted(this, new V_Volumn_List1RowChangeEvent(((V_Volumn_List1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_Volumn_List1RowDeleting != null)) {
                    this.V_Volumn_List1RowDeleting(this, new V_Volumn_List1RowChangeEvent(((V_Volumn_List1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_Volumn_List1Row(V_Volumn_List1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_Volumn_List1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_InvoiceTotalDataTable : global::System.Data.TypedTableBase<Temp_InvoiceTotalRow> {
            
            private global::System.Data.DataColumn columnInvoiceType;
            
            private global::System.Data.DataColumn columnTotalMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalDataTable() {
                this.TableName = "Temp_InvoiceTotal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_InvoiceTotalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_InvoiceTotalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceTypeColumn {
                get {
                    return this.columnInvoiceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMoneyColumn {
                get {
                    return this.columnTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalRow this[int index] {
                get {
                    return ((Temp_InvoiceTotalRow)(this.Rows[index]));
                }
            }
            
            public event Temp_InvoiceTotalRowChangeEventHandler Temp_InvoiceTotalRowChanging;
            
            public event Temp_InvoiceTotalRowChangeEventHandler Temp_InvoiceTotalRowChanged;
            
            public event Temp_InvoiceTotalRowChangeEventHandler Temp_InvoiceTotalRowDeleting;
            
            public event Temp_InvoiceTotalRowChangeEventHandler Temp_InvoiceTotalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_InvoiceTotalRow(Temp_InvoiceTotalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalRow AddTemp_InvoiceTotalRow(string InvoiceType, float TotalMoney) {
                Temp_InvoiceTotalRow rowTemp_InvoiceTotalRow = ((Temp_InvoiceTotalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InvoiceType,
                        TotalMoney};
                rowTemp_InvoiceTotalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_InvoiceTotalRow);
                return rowTemp_InvoiceTotalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_InvoiceTotalDataTable cln = ((Temp_InvoiceTotalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_InvoiceTotalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvoiceType = base.Columns["InvoiceType"];
                this.columnTotalMoney = base.Columns["TotalMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvoiceType = new global::System.Data.DataColumn("InvoiceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceType);
                this.columnTotalMoney = new global::System.Data.DataColumn("TotalMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalRow NewTemp_InvoiceTotalRow() {
                return ((Temp_InvoiceTotalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_InvoiceTotalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_InvoiceTotalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_InvoiceTotalRowChanged != null)) {
                    this.Temp_InvoiceTotalRowChanged(this, new Temp_InvoiceTotalRowChangeEvent(((Temp_InvoiceTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_InvoiceTotalRowChanging != null)) {
                    this.Temp_InvoiceTotalRowChanging(this, new Temp_InvoiceTotalRowChangeEvent(((Temp_InvoiceTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_InvoiceTotalRowDeleted != null)) {
                    this.Temp_InvoiceTotalRowDeleted(this, new Temp_InvoiceTotalRowChangeEvent(((Temp_InvoiceTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_InvoiceTotalRowDeleting != null)) {
                    this.Temp_InvoiceTotalRowDeleting(this, new Temp_InvoiceTotalRowChangeEvent(((Temp_InvoiceTotalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_InvoiceTotalRow(Temp_InvoiceTotalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_InvoiceTotalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_DayChargeDataTable : global::System.Data.TypedTableBase<Temp_DayChargeRow> {
            
            private global::System.Data.DataColumn columnCustomerCount;
            
            private global::System.Data.DataColumn columnDayCharge;
            
            private global::System.Data.DataColumn columnAccountRec;
            
            private global::System.Data.DataColumn columnFactRec;
            
            private global::System.Data.DataColumn columnDayAdvanceDeposit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeDataTable() {
                this.TableName = "Temp_DayCharge";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_DayChargeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_DayChargeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCountColumn {
                get {
                    return this.columnCustomerCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayChargeColumn {
                get {
                    return this.columnDayCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountRecColumn {
                get {
                    return this.columnAccountRec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactRecColumn {
                get {
                    return this.columnFactRec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayAdvanceDepositColumn {
                get {
                    return this.columnDayAdvanceDeposit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeRow this[int index] {
                get {
                    return ((Temp_DayChargeRow)(this.Rows[index]));
                }
            }
            
            public event Temp_DayChargeRowChangeEventHandler Temp_DayChargeRowChanging;
            
            public event Temp_DayChargeRowChangeEventHandler Temp_DayChargeRowChanged;
            
            public event Temp_DayChargeRowChangeEventHandler Temp_DayChargeRowDeleting;
            
            public event Temp_DayChargeRowChangeEventHandler Temp_DayChargeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_DayChargeRow(Temp_DayChargeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeRow AddTemp_DayChargeRow(int CustomerCount, float DayCharge, float AccountRec, float FactRec, float DayAdvanceDeposit) {
                Temp_DayChargeRow rowTemp_DayChargeRow = ((Temp_DayChargeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerCount,
                        DayCharge,
                        AccountRec,
                        FactRec,
                        DayAdvanceDeposit};
                rowTemp_DayChargeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_DayChargeRow);
                return rowTemp_DayChargeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_DayChargeDataTable cln = ((Temp_DayChargeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_DayChargeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerCount = base.Columns["CustomerCount"];
                this.columnDayCharge = base.Columns["DayCharge"];
                this.columnAccountRec = base.Columns["AccountRec"];
                this.columnFactRec = base.Columns["FactRec"];
                this.columnDayAdvanceDeposit = base.Columns["DayAdvanceDeposit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerCount = new global::System.Data.DataColumn("CustomerCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCount);
                this.columnDayCharge = new global::System.Data.DataColumn("DayCharge", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayCharge);
                this.columnAccountRec = new global::System.Data.DataColumn("AccountRec", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountRec);
                this.columnFactRec = new global::System.Data.DataColumn("FactRec", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactRec);
                this.columnDayAdvanceDeposit = new global::System.Data.DataColumn("DayAdvanceDeposit", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayAdvanceDeposit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeRow NewTemp_DayChargeRow() {
                return ((Temp_DayChargeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_DayChargeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_DayChargeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_DayChargeRowChanged != null)) {
                    this.Temp_DayChargeRowChanged(this, new Temp_DayChargeRowChangeEvent(((Temp_DayChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_DayChargeRowChanging != null)) {
                    this.Temp_DayChargeRowChanging(this, new Temp_DayChargeRowChangeEvent(((Temp_DayChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_DayChargeRowDeleted != null)) {
                    this.Temp_DayChargeRowDeleted(this, new Temp_DayChargeRowChangeEvent(((Temp_DayChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_DayChargeRowDeleting != null)) {
                    this.Temp_DayChargeRowDeleting(this, new Temp_DayChargeRowChangeEvent(((Temp_DayChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_DayChargeRow(Temp_DayChargeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_DayChargeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_MonthChargeDataTable : global::System.Data.TypedTableBase<Temp_MonthChargeRow> {
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnCustomerCount;
            
            private global::System.Data.DataColumn columnMonthCharge;
            
            private global::System.Data.DataColumn columnAccountRec;
            
            private global::System.Data.DataColumn columnFactRec;
            
            private global::System.Data.DataColumn columnMonthAdvanceDeposit;
            
            private global::System.Data.DataColumn columnMonthTotalMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeDataTable() {
                this.TableName = "Temp_MonthCharge";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_MonthChargeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_MonthChargeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerCountColumn {
                get {
                    return this.columnCustomerCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthChargeColumn {
                get {
                    return this.columnMonthCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountRecColumn {
                get {
                    return this.columnAccountRec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FactRecColumn {
                get {
                    return this.columnFactRec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthAdvanceDepositColumn {
                get {
                    return this.columnMonthAdvanceDeposit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthTotalMoneyColumn {
                get {
                    return this.columnMonthTotalMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeRow this[int index] {
                get {
                    return ((Temp_MonthChargeRow)(this.Rows[index]));
                }
            }
            
            public event Temp_MonthChargeRowChangeEventHandler Temp_MonthChargeRowChanging;
            
            public event Temp_MonthChargeRowChangeEventHandler Temp_MonthChargeRowChanged;
            
            public event Temp_MonthChargeRowChangeEventHandler Temp_MonthChargeRowDeleting;
            
            public event Temp_MonthChargeRowChangeEventHandler Temp_MonthChargeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_MonthChargeRow(Temp_MonthChargeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeRow AddTemp_MonthChargeRow(string UserName, int CustomerCount, float MonthCharge, float AccountRec, float FactRec, float MonthAdvanceDeposit, float MonthTotalMoney) {
                Temp_MonthChargeRow rowTemp_MonthChargeRow = ((Temp_MonthChargeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserName,
                        CustomerCount,
                        MonthCharge,
                        AccountRec,
                        FactRec,
                        MonthAdvanceDeposit,
                        MonthTotalMoney};
                rowTemp_MonthChargeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_MonthChargeRow);
                return rowTemp_MonthChargeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_MonthChargeDataTable cln = ((Temp_MonthChargeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_MonthChargeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserName = base.Columns["UserName"];
                this.columnCustomerCount = base.Columns["CustomerCount"];
                this.columnMonthCharge = base.Columns["MonthCharge"];
                this.columnAccountRec = base.Columns["AccountRec"];
                this.columnFactRec = base.Columns["FactRec"];
                this.columnMonthAdvanceDeposit = base.Columns["MonthAdvanceDeposit"];
                this.columnMonthTotalMoney = base.Columns["MonthTotalMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnCustomerCount = new global::System.Data.DataColumn("CustomerCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerCount);
                this.columnMonthCharge = new global::System.Data.DataColumn("MonthCharge", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthCharge);
                this.columnAccountRec = new global::System.Data.DataColumn("AccountRec", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountRec);
                this.columnFactRec = new global::System.Data.DataColumn("FactRec", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFactRec);
                this.columnMonthAdvanceDeposit = new global::System.Data.DataColumn("MonthAdvanceDeposit", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthAdvanceDeposit);
                this.columnMonthTotalMoney = new global::System.Data.DataColumn("MonthTotalMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthTotalMoney);
                this.columnMonthCharge.Caption = "DayCharge";
                this.columnMonthAdvanceDeposit.Caption = "DayAdvanceDeposit";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeRow NewTemp_MonthChargeRow() {
                return ((Temp_MonthChargeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_MonthChargeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_MonthChargeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_MonthChargeRowChanged != null)) {
                    this.Temp_MonthChargeRowChanged(this, new Temp_MonthChargeRowChangeEvent(((Temp_MonthChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_MonthChargeRowChanging != null)) {
                    this.Temp_MonthChargeRowChanging(this, new Temp_MonthChargeRowChangeEvent(((Temp_MonthChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_MonthChargeRowDeleted != null)) {
                    this.Temp_MonthChargeRowDeleted(this, new Temp_MonthChargeRowChangeEvent(((Temp_MonthChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_MonthChargeRowDeleting != null)) {
                    this.Temp_MonthChargeRowDeleting(this, new Temp_MonthChargeRowChangeEvent(((Temp_MonthChargeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_MonthChargeRow(Temp_MonthChargeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_MonthChargeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_CityArrearDataTable : global::System.Data.TypedTableBase<Temp_CityArrearRow> {
            
            private global::System.Data.DataColumn columnCustomerNo;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnJanArrearMoney;
            
            private global::System.Data.DataColumn columnFebArrearMoney;
            
            private global::System.Data.DataColumn columnMarArrearMoney;
            
            private global::System.Data.DataColumn columnAprArrearMoney;
            
            private global::System.Data.DataColumn columnMayArrearMoney;
            
            private global::System.Data.DataColumn columnJunArrearMoney;
            
            private global::System.Data.DataColumn columnJulArrearMoney;
            
            private global::System.Data.DataColumn columnAugArrearMoney;
            
            private global::System.Data.DataColumn columnSepArrearMoney;
            
            private global::System.Data.DataColumn columnOctArrearMoney;
            
            private global::System.Data.DataColumn columnNovArrearMoney;
            
            private global::System.Data.DataColumn columnDecArrearMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearDataTable() {
                this.TableName = "Temp_CityArrear";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_CityArrearDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_CityArrearDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNoColumn {
                get {
                    return this.columnCustomerNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JanArrearMoneyColumn {
                get {
                    return this.columnJanArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FebArrearMoneyColumn {
                get {
                    return this.columnFebArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarArrearMoneyColumn {
                get {
                    return this.columnMarArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AprArrearMoneyColumn {
                get {
                    return this.columnAprArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MayArrearMoneyColumn {
                get {
                    return this.columnMayArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JunArrearMoneyColumn {
                get {
                    return this.columnJunArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JulArrearMoneyColumn {
                get {
                    return this.columnJulArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AugArrearMoneyColumn {
                get {
                    return this.columnAugArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SepArrearMoneyColumn {
                get {
                    return this.columnSepArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OctArrearMoneyColumn {
                get {
                    return this.columnOctArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NovArrearMoneyColumn {
                get {
                    return this.columnNovArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DecArrearMoneyColumn {
                get {
                    return this.columnDecArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearRow this[int index] {
                get {
                    return ((Temp_CityArrearRow)(this.Rows[index]));
                }
            }
            
            public event Temp_CityArrearRowChangeEventHandler Temp_CityArrearRowChanging;
            
            public event Temp_CityArrearRowChangeEventHandler Temp_CityArrearRowChanged;
            
            public event Temp_CityArrearRowChangeEventHandler Temp_CityArrearRowDeleting;
            
            public event Temp_CityArrearRowChangeEventHandler Temp_CityArrearRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_CityArrearRow(Temp_CityArrearRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearRow AddTemp_CityArrearRow(string CustomerNo, string CustomerName, float JanArrearMoney, float FebArrearMoney, float MarArrearMoney, float AprArrearMoney, float MayArrearMoney, float JunArrearMoney, float JulArrearMoney, float AugArrearMoney, float SepArrearMoney, float OctArrearMoney, float NovArrearMoney, float DecArrearMoney) {
                Temp_CityArrearRow rowTemp_CityArrearRow = ((Temp_CityArrearRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerNo,
                        CustomerName,
                        JanArrearMoney,
                        FebArrearMoney,
                        MarArrearMoney,
                        AprArrearMoney,
                        MayArrearMoney,
                        JunArrearMoney,
                        JulArrearMoney,
                        AugArrearMoney,
                        SepArrearMoney,
                        OctArrearMoney,
                        NovArrearMoney,
                        DecArrearMoney};
                rowTemp_CityArrearRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_CityArrearRow);
                return rowTemp_CityArrearRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_CityArrearDataTable cln = ((Temp_CityArrearDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_CityArrearDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerNo = base.Columns["CustomerNo"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnJanArrearMoney = base.Columns["JanArrearMoney"];
                this.columnFebArrearMoney = base.Columns["FebArrearMoney"];
                this.columnMarArrearMoney = base.Columns["MarArrearMoney"];
                this.columnAprArrearMoney = base.Columns["AprArrearMoney"];
                this.columnMayArrearMoney = base.Columns["MayArrearMoney"];
                this.columnJunArrearMoney = base.Columns["JunArrearMoney"];
                this.columnJulArrearMoney = base.Columns["JulArrearMoney"];
                this.columnAugArrearMoney = base.Columns["AugArrearMoney"];
                this.columnSepArrearMoney = base.Columns["SepArrearMoney"];
                this.columnOctArrearMoney = base.Columns["OctArrearMoney"];
                this.columnNovArrearMoney = base.Columns["NovArrearMoney"];
                this.columnDecArrearMoney = base.Columns["DecArrearMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerNo = new global::System.Data.DataColumn("CustomerNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnJanArrearMoney = new global::System.Data.DataColumn("JanArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJanArrearMoney);
                this.columnFebArrearMoney = new global::System.Data.DataColumn("FebArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFebArrearMoney);
                this.columnMarArrearMoney = new global::System.Data.DataColumn("MarArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarArrearMoney);
                this.columnAprArrearMoney = new global::System.Data.DataColumn("AprArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAprArrearMoney);
                this.columnMayArrearMoney = new global::System.Data.DataColumn("MayArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMayArrearMoney);
                this.columnJunArrearMoney = new global::System.Data.DataColumn("JunArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJunArrearMoney);
                this.columnJulArrearMoney = new global::System.Data.DataColumn("JulArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJulArrearMoney);
                this.columnAugArrearMoney = new global::System.Data.DataColumn("AugArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAugArrearMoney);
                this.columnSepArrearMoney = new global::System.Data.DataColumn("SepArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSepArrearMoney);
                this.columnOctArrearMoney = new global::System.Data.DataColumn("OctArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOctArrearMoney);
                this.columnNovArrearMoney = new global::System.Data.DataColumn("NovArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNovArrearMoney);
                this.columnDecArrearMoney = new global::System.Data.DataColumn("DecArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecArrearMoney);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearRow NewTemp_CityArrearRow() {
                return ((Temp_CityArrearRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_CityArrearRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_CityArrearRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_CityArrearRowChanged != null)) {
                    this.Temp_CityArrearRowChanged(this, new Temp_CityArrearRowChangeEvent(((Temp_CityArrearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_CityArrearRowChanging != null)) {
                    this.Temp_CityArrearRowChanging(this, new Temp_CityArrearRowChangeEvent(((Temp_CityArrearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_CityArrearRowDeleted != null)) {
                    this.Temp_CityArrearRowDeleted(this, new Temp_CityArrearRowChangeEvent(((Temp_CityArrearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_CityArrearRowDeleting != null)) {
                    this.Temp_CityArrearRowDeleting(this, new Temp_CityArrearRowChangeEvent(((Temp_CityArrearRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_CityArrearRow(Temp_CityArrearRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_CityArrearDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_ArrearSumDataTable : global::System.Data.TypedTableBase<Temp_ArrearSumRow> {
            
            private global::System.Data.DataColumn columnVolumeNo;
            
            private global::System.Data.DataColumn columnJanArrearMoney;
            
            private global::System.Data.DataColumn columnFebArrearMoney;
            
            private global::System.Data.DataColumn columnMarArrearMoney;
            
            private global::System.Data.DataColumn columnAprArrearMoney;
            
            private global::System.Data.DataColumn columnMayArrearMoney;
            
            private global::System.Data.DataColumn columnJunArrearMoney;
            
            private global::System.Data.DataColumn columnJulArrearMoney;
            
            private global::System.Data.DataColumn columnAugArrearMoney;
            
            private global::System.Data.DataColumn columnSepArrearMoney;
            
            private global::System.Data.DataColumn columnOctArrearMoney;
            
            private global::System.Data.DataColumn columnNovArrearMoney;
            
            private global::System.Data.DataColumn columnDecArrearMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumDataTable() {
                this.TableName = "Temp_ArrearSum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_ArrearSumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_ArrearSumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VolumeNoColumn {
                get {
                    return this.columnVolumeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JanArrearMoneyColumn {
                get {
                    return this.columnJanArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FebArrearMoneyColumn {
                get {
                    return this.columnFebArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarArrearMoneyColumn {
                get {
                    return this.columnMarArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AprArrearMoneyColumn {
                get {
                    return this.columnAprArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MayArrearMoneyColumn {
                get {
                    return this.columnMayArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JunArrearMoneyColumn {
                get {
                    return this.columnJunArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JulArrearMoneyColumn {
                get {
                    return this.columnJulArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AugArrearMoneyColumn {
                get {
                    return this.columnAugArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SepArrearMoneyColumn {
                get {
                    return this.columnSepArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OctArrearMoneyColumn {
                get {
                    return this.columnOctArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NovArrearMoneyColumn {
                get {
                    return this.columnNovArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DecArrearMoneyColumn {
                get {
                    return this.columnDecArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumRow this[int index] {
                get {
                    return ((Temp_ArrearSumRow)(this.Rows[index]));
                }
            }
            
            public event Temp_ArrearSumRowChangeEventHandler Temp_ArrearSumRowChanging;
            
            public event Temp_ArrearSumRowChangeEventHandler Temp_ArrearSumRowChanged;
            
            public event Temp_ArrearSumRowChangeEventHandler Temp_ArrearSumRowDeleting;
            
            public event Temp_ArrearSumRowChangeEventHandler Temp_ArrearSumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_ArrearSumRow(Temp_ArrearSumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumRow AddTemp_ArrearSumRow(string VolumeNo, float JanArrearMoney, float FebArrearMoney, float MarArrearMoney, float AprArrearMoney, float MayArrearMoney, float JunArrearMoney, float JulArrearMoney, float AugArrearMoney, float SepArrearMoney, float OctArrearMoney, float NovArrearMoney, float DecArrearMoney) {
                Temp_ArrearSumRow rowTemp_ArrearSumRow = ((Temp_ArrearSumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        VolumeNo,
                        JanArrearMoney,
                        FebArrearMoney,
                        MarArrearMoney,
                        AprArrearMoney,
                        MayArrearMoney,
                        JunArrearMoney,
                        JulArrearMoney,
                        AugArrearMoney,
                        SepArrearMoney,
                        OctArrearMoney,
                        NovArrearMoney,
                        DecArrearMoney};
                rowTemp_ArrearSumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_ArrearSumRow);
                return rowTemp_ArrearSumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_ArrearSumDataTable cln = ((Temp_ArrearSumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_ArrearSumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVolumeNo = base.Columns["VolumeNo"];
                this.columnJanArrearMoney = base.Columns["JanArrearMoney"];
                this.columnFebArrearMoney = base.Columns["FebArrearMoney"];
                this.columnMarArrearMoney = base.Columns["MarArrearMoney"];
                this.columnAprArrearMoney = base.Columns["AprArrearMoney"];
                this.columnMayArrearMoney = base.Columns["MayArrearMoney"];
                this.columnJunArrearMoney = base.Columns["JunArrearMoney"];
                this.columnJulArrearMoney = base.Columns["JulArrearMoney"];
                this.columnAugArrearMoney = base.Columns["AugArrearMoney"];
                this.columnSepArrearMoney = base.Columns["SepArrearMoney"];
                this.columnOctArrearMoney = base.Columns["OctArrearMoney"];
                this.columnNovArrearMoney = base.Columns["NovArrearMoney"];
                this.columnDecArrearMoney = base.Columns["DecArrearMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVolumeNo = new global::System.Data.DataColumn("VolumeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVolumeNo);
                this.columnJanArrearMoney = new global::System.Data.DataColumn("JanArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJanArrearMoney);
                this.columnFebArrearMoney = new global::System.Data.DataColumn("FebArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFebArrearMoney);
                this.columnMarArrearMoney = new global::System.Data.DataColumn("MarArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarArrearMoney);
                this.columnAprArrearMoney = new global::System.Data.DataColumn("AprArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAprArrearMoney);
                this.columnMayArrearMoney = new global::System.Data.DataColumn("MayArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMayArrearMoney);
                this.columnJunArrearMoney = new global::System.Data.DataColumn("JunArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJunArrearMoney);
                this.columnJulArrearMoney = new global::System.Data.DataColumn("JulArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJulArrearMoney);
                this.columnAugArrearMoney = new global::System.Data.DataColumn("AugArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAugArrearMoney);
                this.columnSepArrearMoney = new global::System.Data.DataColumn("SepArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSepArrearMoney);
                this.columnOctArrearMoney = new global::System.Data.DataColumn("OctArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOctArrearMoney);
                this.columnNovArrearMoney = new global::System.Data.DataColumn("NovArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNovArrearMoney);
                this.columnDecArrearMoney = new global::System.Data.DataColumn("DecArrearMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecArrearMoney);
                this.columnVolumeNo.Caption = "CustomerName";
                this.columnDecArrearMoney.DefaultValue = ((float)(0F));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumRow NewTemp_ArrearSumRow() {
                return ((Temp_ArrearSumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_ArrearSumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_ArrearSumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_ArrearSumRowChanged != null)) {
                    this.Temp_ArrearSumRowChanged(this, new Temp_ArrearSumRowChangeEvent(((Temp_ArrearSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_ArrearSumRowChanging != null)) {
                    this.Temp_ArrearSumRowChanging(this, new Temp_ArrearSumRowChangeEvent(((Temp_ArrearSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_ArrearSumRowDeleted != null)) {
                    this.Temp_ArrearSumRowDeleted(this, new Temp_ArrearSumRowChangeEvent(((Temp_ArrearSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_ArrearSumRowDeleting != null)) {
                    this.Temp_ArrearSumRowDeleting(this, new Temp_ArrearSumRowChangeEvent(((Temp_ArrearSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_ArrearSumRow(Temp_ArrearSumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_ArrearSumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_RuralOweDataTable : global::System.Data.TypedTableBase<V_RuralOweRow> {
            
            private global::System.Data.DataColumn columnCountFeeDate;
            
            private global::System.Data.DataColumn columnAdvanceDepositSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweDataTable() {
                this.TableName = "V_RuralOwe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_RuralOweDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_RuralOweDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountFeeDateColumn {
                get {
                    return this.columnCountFeeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvanceDepositSumColumn {
                get {
                    return this.columnAdvanceDepositSum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweRow this[int index] {
                get {
                    return ((V_RuralOweRow)(this.Rows[index]));
                }
            }
            
            public event V_RuralOweRowChangeEventHandler V_RuralOweRowChanging;
            
            public event V_RuralOweRowChangeEventHandler V_RuralOweRowChanged;
            
            public event V_RuralOweRowChangeEventHandler V_RuralOweRowDeleting;
            
            public event V_RuralOweRowChangeEventHandler V_RuralOweRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_RuralOweRow(V_RuralOweRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweRow AddV_RuralOweRow(string CountFeeDate, float AdvanceDepositSum) {
                V_RuralOweRow rowV_RuralOweRow = ((V_RuralOweRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CountFeeDate,
                        AdvanceDepositSum};
                rowV_RuralOweRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowV_RuralOweRow);
                return rowV_RuralOweRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                V_RuralOweDataTable cln = ((V_RuralOweDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new V_RuralOweDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountFeeDate = base.Columns["CountFeeDate"];
                this.columnAdvanceDepositSum = base.Columns["AdvanceDepositSum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountFeeDate = new global::System.Data.DataColumn("CountFeeDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountFeeDate);
                this.columnAdvanceDepositSum = new global::System.Data.DataColumn("AdvanceDepositSum", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvanceDepositSum);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweRow NewV_RuralOweRow() {
                return ((V_RuralOweRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new V_RuralOweRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(V_RuralOweRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_RuralOweRowChanged != null)) {
                    this.V_RuralOweRowChanged(this, new V_RuralOweRowChangeEvent(((V_RuralOweRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_RuralOweRowChanging != null)) {
                    this.V_RuralOweRowChanging(this, new V_RuralOweRowChangeEvent(((V_RuralOweRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_RuralOweRowDeleted != null)) {
                    this.V_RuralOweRowDeleted(this, new V_RuralOweRowChangeEvent(((V_RuralOweRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_RuralOweRowDeleting != null)) {
                    this.V_RuralOweRowDeleting(this, new V_RuralOweRowChangeEvent(((V_RuralOweRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_RuralOweRow(V_RuralOweRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_RuralOweDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NegativeInvoiceDataTable : global::System.Data.TypedTableBase<NegativeInvoiceRow> {
            
            private global::System.Data.DataColumn columnCustomerNo;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnNegativeValue;
            
            private global::System.Data.DataColumn columnNegativeMoney;
            
            private global::System.Data.DataColumn columnNegativeDate;
            
            private global::System.Data.DataColumn columnPrintDate;
            
            private global::System.Data.DataColumn columnPrintMan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceDataTable() {
                this.TableName = "NegativeInvoice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NegativeInvoiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NegativeInvoiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNoColumn {
                get {
                    return this.columnCustomerNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NegativeValueColumn {
                get {
                    return this.columnNegativeValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NegativeMoneyColumn {
                get {
                    return this.columnNegativeMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NegativeDateColumn {
                get {
                    return this.columnNegativeDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrintDateColumn {
                get {
                    return this.columnPrintDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrintManColumn {
                get {
                    return this.columnPrintMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceRow this[int index] {
                get {
                    return ((NegativeInvoiceRow)(this.Rows[index]));
                }
            }
            
            public event NegativeInvoiceRowChangeEventHandler NegativeInvoiceRowChanging;
            
            public event NegativeInvoiceRowChangeEventHandler NegativeInvoiceRowChanged;
            
            public event NegativeInvoiceRowChangeEventHandler NegativeInvoiceRowDeleting;
            
            public event NegativeInvoiceRowChangeEventHandler NegativeInvoiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNegativeInvoiceRow(NegativeInvoiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceRow AddNegativeInvoiceRow(string CustomerNo, string CustomerName, float NegativeValue, float NegativeMoney, System.DateTime NegativeDate, System.DateTime PrintDate, string PrintMan) {
                NegativeInvoiceRow rowNegativeInvoiceRow = ((NegativeInvoiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerNo,
                        CustomerName,
                        NegativeValue,
                        NegativeMoney,
                        NegativeDate,
                        PrintDate,
                        PrintMan};
                rowNegativeInvoiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNegativeInvoiceRow);
                return rowNegativeInvoiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NegativeInvoiceDataTable cln = ((NegativeInvoiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NegativeInvoiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerNo = base.Columns["CustomerNo"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnNegativeValue = base.Columns["NegativeValue"];
                this.columnNegativeMoney = base.Columns["NegativeMoney"];
                this.columnNegativeDate = base.Columns["NegativeDate"];
                this.columnPrintDate = base.Columns["PrintDate"];
                this.columnPrintMan = base.Columns["PrintMan"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerNo = new global::System.Data.DataColumn("CustomerNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerNo);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnNegativeValue = new global::System.Data.DataColumn("NegativeValue", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNegativeValue);
                this.columnNegativeMoney = new global::System.Data.DataColumn("NegativeMoney", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNegativeMoney);
                this.columnNegativeDate = new global::System.Data.DataColumn("NegativeDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNegativeDate);
                this.columnPrintDate = new global::System.Data.DataColumn("PrintDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintDate);
                this.columnPrintMan = new global::System.Data.DataColumn("PrintMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintMan);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceRow NewNegativeInvoiceRow() {
                return ((NegativeInvoiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NegativeInvoiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NegativeInvoiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NegativeInvoiceRowChanged != null)) {
                    this.NegativeInvoiceRowChanged(this, new NegativeInvoiceRowChangeEvent(((NegativeInvoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NegativeInvoiceRowChanging != null)) {
                    this.NegativeInvoiceRowChanging(this, new NegativeInvoiceRowChangeEvent(((NegativeInvoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NegativeInvoiceRowDeleted != null)) {
                    this.NegativeInvoiceRowDeleted(this, new NegativeInvoiceRowChangeEvent(((NegativeInvoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NegativeInvoiceRowDeleting != null)) {
                    this.NegativeInvoiceRowDeleting(this, new NegativeInvoiceRowChangeEvent(((NegativeInvoiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNegativeInvoiceRow(NegativeInvoiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NegativeInvoiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Temp_ArrearYearsSumDataTable : global::System.Data.TypedTableBase<Temp_ArrearYearsSumRow> {
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnVolumeNo;
            
            private global::System.Data.DataColumn columnJanArrearMoney;
            
            private global::System.Data.DataColumn columnFebArrearMoney;
            
            private global::System.Data.DataColumn columnMarArrearMoney;
            
            private global::System.Data.DataColumn columnAprArrearMoney;
            
            private global::System.Data.DataColumn columnMayArrearMoney;
            
            private global::System.Data.DataColumn columnJunArrearMoney;
            
            private global::System.Data.DataColumn columnJulArrearMoney;
            
            private global::System.Data.DataColumn columnAugArrearMoney;
            
            private global::System.Data.DataColumn columnSepArrearMoney;
            
            private global::System.Data.DataColumn columnOctArrearMoney;
            
            private global::System.Data.DataColumn columnNovArrearMoney;
            
            private global::System.Data.DataColumn columnDecArrearMoney;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumDataTable() {
                this.TableName = "Temp_ArrearYearsSum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_ArrearYearsSumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Temp_ArrearYearsSumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VolumeNoColumn {
                get {
                    return this.columnVolumeNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JanArrearMoneyColumn {
                get {
                    return this.columnJanArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FebArrearMoneyColumn {
                get {
                    return this.columnFebArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarArrearMoneyColumn {
                get {
                    return this.columnMarArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AprArrearMoneyColumn {
                get {
                    return this.columnAprArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MayArrearMoneyColumn {
                get {
                    return this.columnMayArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JunArrearMoneyColumn {
                get {
                    return this.columnJunArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JulArrearMoneyColumn {
                get {
                    return this.columnJulArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AugArrearMoneyColumn {
                get {
                    return this.columnAugArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SepArrearMoneyColumn {
                get {
                    return this.columnSepArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OctArrearMoneyColumn {
                get {
                    return this.columnOctArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NovArrearMoneyColumn {
                get {
                    return this.columnNovArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DecArrearMoneyColumn {
                get {
                    return this.columnDecArrearMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumRow this[int index] {
                get {
                    return ((Temp_ArrearYearsSumRow)(this.Rows[index]));
                }
            }
            
            public event Temp_ArrearYearsSumRowChangeEventHandler Temp_ArrearYearsSumRowChanging;
            
            public event Temp_ArrearYearsSumRowChangeEventHandler Temp_ArrearYearsSumRowChanged;
            
            public event Temp_ArrearYearsSumRowChangeEventHandler Temp_ArrearYearsSumRowDeleting;
            
            public event Temp_ArrearYearsSumRowChangeEventHandler Temp_ArrearYearsSumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemp_ArrearYearsSumRow(Temp_ArrearYearsSumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumRow AddTemp_ArrearYearsSumRow(int Year, string VolumeNo, double JanArrearMoney, double FebArrearMoney, double MarArrearMoney, double AprArrearMoney, double MayArrearMoney, double JunArrearMoney, double JulArrearMoney, double AugArrearMoney, double SepArrearMoney, double OctArrearMoney, double NovArrearMoney, double DecArrearMoney) {
                Temp_ArrearYearsSumRow rowTemp_ArrearYearsSumRow = ((Temp_ArrearYearsSumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Year,
                        VolumeNo,
                        JanArrearMoney,
                        FebArrearMoney,
                        MarArrearMoney,
                        AprArrearMoney,
                        MayArrearMoney,
                        JunArrearMoney,
                        JulArrearMoney,
                        AugArrearMoney,
                        SepArrearMoney,
                        OctArrearMoney,
                        NovArrearMoney,
                        DecArrearMoney};
                rowTemp_ArrearYearsSumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemp_ArrearYearsSumRow);
                return rowTemp_ArrearYearsSumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Temp_ArrearYearsSumDataTable cln = ((Temp_ArrearYearsSumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Temp_ArrearYearsSumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnYear = base.Columns["Year"];
                this.columnVolumeNo = base.Columns["VolumeNo"];
                this.columnJanArrearMoney = base.Columns["JanArrearMoney"];
                this.columnFebArrearMoney = base.Columns["FebArrearMoney"];
                this.columnMarArrearMoney = base.Columns["MarArrearMoney"];
                this.columnAprArrearMoney = base.Columns["AprArrearMoney"];
                this.columnMayArrearMoney = base.Columns["MayArrearMoney"];
                this.columnJunArrearMoney = base.Columns["JunArrearMoney"];
                this.columnJulArrearMoney = base.Columns["JulArrearMoney"];
                this.columnAugArrearMoney = base.Columns["AugArrearMoney"];
                this.columnSepArrearMoney = base.Columns["SepArrearMoney"];
                this.columnOctArrearMoney = base.Columns["OctArrearMoney"];
                this.columnNovArrearMoney = base.Columns["NovArrearMoney"];
                this.columnDecArrearMoney = base.Columns["DecArrearMoney"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnVolumeNo = new global::System.Data.DataColumn("VolumeNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVolumeNo);
                this.columnJanArrearMoney = new global::System.Data.DataColumn("JanArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJanArrearMoney);
                this.columnFebArrearMoney = new global::System.Data.DataColumn("FebArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFebArrearMoney);
                this.columnMarArrearMoney = new global::System.Data.DataColumn("MarArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarArrearMoney);
                this.columnAprArrearMoney = new global::System.Data.DataColumn("AprArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAprArrearMoney);
                this.columnMayArrearMoney = new global::System.Data.DataColumn("MayArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMayArrearMoney);
                this.columnJunArrearMoney = new global::System.Data.DataColumn("JunArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJunArrearMoney);
                this.columnJulArrearMoney = new global::System.Data.DataColumn("JulArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJulArrearMoney);
                this.columnAugArrearMoney = new global::System.Data.DataColumn("AugArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAugArrearMoney);
                this.columnSepArrearMoney = new global::System.Data.DataColumn("SepArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSepArrearMoney);
                this.columnOctArrearMoney = new global::System.Data.DataColumn("OctArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOctArrearMoney);
                this.columnNovArrearMoney = new global::System.Data.DataColumn("NovArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNovArrearMoney);
                this.columnDecArrearMoney = new global::System.Data.DataColumn("DecArrearMoney", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecArrearMoney);
                this.columnVolumeNo.AllowDBNull = false;
                this.columnVolumeNo.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumRow NewTemp_ArrearYearsSumRow() {
                return ((Temp_ArrearYearsSumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Temp_ArrearYearsSumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Temp_ArrearYearsSumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Temp_ArrearYearsSumRowChanged != null)) {
                    this.Temp_ArrearYearsSumRowChanged(this, new Temp_ArrearYearsSumRowChangeEvent(((Temp_ArrearYearsSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Temp_ArrearYearsSumRowChanging != null)) {
                    this.Temp_ArrearYearsSumRowChanging(this, new Temp_ArrearYearsSumRowChangeEvent(((Temp_ArrearYearsSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Temp_ArrearYearsSumRowDeleted != null)) {
                    this.Temp_ArrearYearsSumRowDeleted(this, new Temp_ArrearYearsSumRowChangeEvent(((Temp_ArrearYearsSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Temp_ArrearYearsSumRowDeleting != null)) {
                    this.Temp_ArrearYearsSumRowDeleting(this, new Temp_ArrearYearsSumRowChangeEvent(((Temp_ArrearYearsSumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemp_ArrearYearsSumRow(Temp_ArrearYearsSumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PowerIMSDataSet ds = new PowerIMSDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Temp_ArrearYearsSumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_MonthPowerFeeRow : global::System.Data.DataRow {
            
            private Temp_MonthPowerFeeDataTable tableTemp_MonthPowerFee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_MonthPowerFeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_MonthPowerFee = ((Temp_MonthPowerFeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceType {
                get {
                    try {
                        return ((string)(this[this.tableTemp_MonthPowerFee.InvoiceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“InvoiceType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.InvoiceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountAmount {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.CountAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“CountAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.CountAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float RuralFeeD {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.RuralFeeDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“RuralFeeD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.RuralFeeDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float RuralFeeX {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.RuralFeeXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“RuralFeeX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.RuralFeeXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CityFeeD {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.CityFeeDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“CityFeeD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.CityFeeDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CityFeeX {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.CityFeeXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“CityFeeX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.CityFeeXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BaseFee {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.BaseFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“BaseFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.BaseFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalFee {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthPowerFee.TotalFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthPowerFee”中列“TotalFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthPowerFee.TotalFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceTypeNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.InvoiceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceTypeNull() {
                this[this.tableTemp_MonthPowerFee.InvoiceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountAmountNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.CountAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountAmountNull() {
                this[this.tableTemp_MonthPowerFee.CountAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuralFeeDNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.RuralFeeDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuralFeeDNull() {
                this[this.tableTemp_MonthPowerFee.RuralFeeDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuralFeeXNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.RuralFeeXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuralFeeXNull() {
                this[this.tableTemp_MonthPowerFee.RuralFeeXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityFeeDNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.CityFeeDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityFeeDNull() {
                this[this.tableTemp_MonthPowerFee.CityFeeDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityFeeXNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.CityFeeXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityFeeXNull() {
                this[this.tableTemp_MonthPowerFee.CityFeeXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseFeeNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.BaseFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseFeeNull() {
                this[this.tableTemp_MonthPowerFee.BaseFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFeeNull() {
                return this.IsNull(this.tableTemp_MonthPowerFee.TotalFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFeeNull() {
                this[this.tableTemp_MonthPowerFee.TotalFeeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_CAreaPowerRow : global::System.Data.DataRow {
            
            private Temp_CAreaPowerDataTable tableTemp_CAreaPower;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_CAreaPowerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_CAreaPower = ((Temp_CAreaPowerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AreaName {
                get {
                    try {
                        return ((string)(this[this.tableTemp_CAreaPower.AreaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“AreaName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.AreaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float backPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.backPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“backPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.backPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalbackPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.TotalbackPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“TotalbackPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.TotalbackPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float offerPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.offerPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“offerPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.offerPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalOfferPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.TotalOfferPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“TotalOfferPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.TotalOfferPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float monthPercent {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.monthPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“monthPercent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.monthPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalPercent {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CAreaPower.TotalPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CAreaPower”中列“TotalPercent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CAreaPower.TotalPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaNameNull() {
                return this.IsNull(this.tableTemp_CAreaPower.AreaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaNameNull() {
                this[this.tableTemp_CAreaPower.AreaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbackPowerNull() {
                return this.IsNull(this.tableTemp_CAreaPower.backPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbackPowerNull() {
                this[this.tableTemp_CAreaPower.backPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalbackPowerNull() {
                return this.IsNull(this.tableTemp_CAreaPower.TotalbackPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalbackPowerNull() {
                this[this.tableTemp_CAreaPower.TotalbackPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsofferPowerNull() {
                return this.IsNull(this.tableTemp_CAreaPower.offerPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetofferPowerNull() {
                this[this.tableTemp_CAreaPower.offerPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOfferPowerNull() {
                return this.IsNull(this.tableTemp_CAreaPower.TotalOfferPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOfferPowerNull() {
                this[this.tableTemp_CAreaPower.TotalOfferPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmonthPercentNull() {
                return this.IsNull(this.tableTemp_CAreaPower.monthPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmonthPercentNull() {
                this[this.tableTemp_CAreaPower.monthPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPercentNull() {
                return this.IsNull(this.tableTemp_CAreaPower.TotalPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPercentNull() {
                this[this.tableTemp_CAreaPower.TotalPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_LinePowerRow : global::System.Data.DataRow {
            
            private Temp_LinePowerDataTable tableTemp_LinePower;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_LinePowerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_LinePower = ((Temp_LinePowerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineName {
                get {
                    try {
                        return ((string)(this[this.tableTemp_LinePower.LineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“LineName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.LineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OfferPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.OfferPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“OfferPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.OfferPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower4 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower4”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower5 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower5”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower6 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower6”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower7 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower7”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower8 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower8”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower9 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower9”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower10 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower10”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower11 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.BackPower11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“BackPower11”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.BackPower11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SumBackPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.SumBackPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“SumBackPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.SumBackPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SumPercent {
                get {
                    try {
                        return ((float)(this[this.tableTemp_LinePower.SumPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_LinePower”中列“SumPercent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_LinePower.SumPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNameNull() {
                return this.IsNull(this.tableTemp_LinePower.LineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNameNull() {
                this[this.tableTemp_LinePower.LineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOfferPowerNull() {
                return this.IsNull(this.tableTemp_LinePower.OfferPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOfferPowerNull() {
                this[this.tableTemp_LinePower.OfferPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower1Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower1Null() {
                this[this.tableTemp_LinePower.BackPower1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower2Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower2Null() {
                this[this.tableTemp_LinePower.BackPower2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower3Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower3Null() {
                this[this.tableTemp_LinePower.BackPower3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower4Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower4Null() {
                this[this.tableTemp_LinePower.BackPower4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower5Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower5Null() {
                this[this.tableTemp_LinePower.BackPower5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower6Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower6Null() {
                this[this.tableTemp_LinePower.BackPower6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower7Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower7Null() {
                this[this.tableTemp_LinePower.BackPower7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower8Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower8Null() {
                this[this.tableTemp_LinePower.BackPower8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower9Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower9Null() {
                this[this.tableTemp_LinePower.BackPower9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower10Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower10Null() {
                this[this.tableTemp_LinePower.BackPower10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower11Null() {
                return this.IsNull(this.tableTemp_LinePower.BackPower11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower11Null() {
                this[this.tableTemp_LinePower.BackPower11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumBackPowerNull() {
                return this.IsNull(this.tableTemp_LinePower.SumBackPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumBackPowerNull() {
                this[this.tableTemp_LinePower.SumBackPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumPercentNull() {
                return this.IsNull(this.tableTemp_LinePower.SumPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumPercentNull() {
                this[this.tableTemp_LinePower.SumPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_RAreaPowerRow : global::System.Data.DataRow {
            
            private Temp_RAreaPowerDataTable tableTemp_RAreaPower;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_RAreaPowerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_RAreaPower = ((Temp_RAreaPowerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RAreaNo {
                get {
                    try {
                        return ((string)(this[this.tableTemp_RAreaPower.RAreaNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“RAreaNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.RAreaNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OfferPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.OfferPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“OfferPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.OfferPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower4 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower4”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower5 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower5”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower6 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower6”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower7 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower7”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower8 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower8”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower9 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower9”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower10 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower10”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float BackPower11 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.BackPower11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“BackPower11”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.BackPower11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SumBackPower {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.SumBackPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“SumBackPower”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.SumBackPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SumPercent {
                get {
                    try {
                        return ((float)(this[this.tableTemp_RAreaPower.SumPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_RAreaPower”中列“SumPercent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_RAreaPower.SumPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRAreaNoNull() {
                return this.IsNull(this.tableTemp_RAreaPower.RAreaNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRAreaNoNull() {
                this[this.tableTemp_RAreaPower.RAreaNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOfferPowerNull() {
                return this.IsNull(this.tableTemp_RAreaPower.OfferPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOfferPowerNull() {
                this[this.tableTemp_RAreaPower.OfferPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower1Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower1Null() {
                this[this.tableTemp_RAreaPower.BackPower1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower2Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower2Null() {
                this[this.tableTemp_RAreaPower.BackPower2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower3Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower3Null() {
                this[this.tableTemp_RAreaPower.BackPower3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower4Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower4Null() {
                this[this.tableTemp_RAreaPower.BackPower4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower5Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower5Null() {
                this[this.tableTemp_RAreaPower.BackPower5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower6Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower6Null() {
                this[this.tableTemp_RAreaPower.BackPower6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower7Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower7Null() {
                this[this.tableTemp_RAreaPower.BackPower7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower8Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower8Null() {
                this[this.tableTemp_RAreaPower.BackPower8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower9Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower9Null() {
                this[this.tableTemp_RAreaPower.BackPower9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower10Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower10Null() {
                this[this.tableTemp_RAreaPower.BackPower10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackPower11Null() {
                return this.IsNull(this.tableTemp_RAreaPower.BackPower11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackPower11Null() {
                this[this.tableTemp_RAreaPower.BackPower11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumBackPowerNull() {
                return this.IsNull(this.tableTemp_RAreaPower.SumBackPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumBackPowerNull() {
                this[this.tableTemp_RAreaPower.SumBackPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumPercentNull() {
                return this.IsNull(this.tableTemp_RAreaPower.SumPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumPercentNull() {
                this[this.tableTemp_RAreaPower.SumPercentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_HingePowerRow : global::System.Data.DataRow {
            
            private Temp_HingePowerDataTable tableTemp_HingePower;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_HingePowerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_HingePower = ((Temp_HingePowerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo {
                get {
                    try {
                        return ((string)(this[this.tableTemp_HingePower.CustomerNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“CustomerNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.CustomerNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableTemp_HingePower.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountFeeAmount {
                get {
                    try {
                        return ((float)(this[this.tableTemp_HingePower.CountFeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“CountFeeAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.CountFeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_HingePower.TotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“TotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.TotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float sumCountFeeAmount {
                get {
                    try {
                        return ((float)(this[this.tableTemp_HingePower.sumCountFeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“sumCountFeeAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.sumCountFeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float sumTotalMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_HingePower.sumTotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_HingePower”中列“sumTotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_HingePower.sumTotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNoNull() {
                return this.IsNull(this.tableTemp_HingePower.CustomerNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNoNull() {
                this[this.tableTemp_HingePower.CustomerNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableTemp_HingePower.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableTemp_HingePower.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeAmountNull() {
                return this.IsNull(this.tableTemp_HingePower.CountFeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeAmountNull() {
                this[this.tableTemp_HingePower.CountFeeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoneyNull() {
                return this.IsNull(this.tableTemp_HingePower.TotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoneyNull() {
                this[this.tableTemp_HingePower.TotalMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumCountFeeAmountNull() {
                return this.IsNull(this.tableTemp_HingePower.sumCountFeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumCountFeeAmountNull() {
                this[this.tableTemp_HingePower.sumCountFeeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumTotalMoneyNull() {
                return this.IsNull(this.tableTemp_HingePower.sumTotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumTotalMoneyNull() {
                this[this.tableTemp_HingePower.sumTotalMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_PowerFeeListRow : global::System.Data.DataRow {
            
            private Temp_PowerFeeListDataTable tableTemp_PowerFeeList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_PowerFeeListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_PowerFeeList = ((Temp_PowerFeeListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index1 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.Index1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“Index1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.Index1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo1 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerNo1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerNo1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerNo1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName1 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerName1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerName1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerName1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float StartCode1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.StartCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“StartCode1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.StartCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float EndCode1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.EndCode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“EndCode1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.EndCode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountFeeAmount1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.CountFeeAmount1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CountFeeAmount1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CountFeeAmount1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney1 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.TotalMoney1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“TotalMoney1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.TotalMoney1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index2 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.Index2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“Index2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.Index2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo2 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerNo2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerNo2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerNo2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName2 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerName2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerName2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerName2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float StartCode2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.StartCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“StartCode2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.StartCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float EndCode2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.EndCode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“EndCode2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.EndCode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountFeeAmount2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.CountFeeAmount2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CountFeeAmount2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CountFeeAmount2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney2 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.TotalMoney2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“TotalMoney2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.TotalMoney2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo3 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerNo3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerNo3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerNo3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName3 {
                get {
                    try {
                        return ((string)(this[this.tableTemp_PowerFeeList.CustomerName3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CustomerName3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CustomerName3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float StartCode3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.StartCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“StartCode3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.StartCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float EndCode3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.EndCode3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“EndCode3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.EndCode3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountFeeAmount3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.CountFeeAmount3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“CountFeeAmount3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.CountFeeAmount3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney3 {
                get {
                    try {
                        return ((float)(this[this.tableTemp_PowerFeeList.TotalMoney3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_PowerFeeList”中列“TotalMoney3”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_PowerFeeList.TotalMoney3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.Index1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex1Null() {
                this[this.tableTemp_PowerFeeList.Index1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNo1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerNo1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNo1Null() {
                this[this.tableTemp_PowerFeeList.CustomerNo1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerName1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerName1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerName1Null() {
                this[this.tableTemp_PowerFeeList.CustomerName1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartCode1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.StartCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartCode1Null() {
                this[this.tableTemp_PowerFeeList.StartCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndCode1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.EndCode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndCode1Null() {
                this[this.tableTemp_PowerFeeList.EndCode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeAmount1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CountFeeAmount1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeAmount1Null() {
                this[this.tableTemp_PowerFeeList.CountFeeAmount1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoney1Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.TotalMoney1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoney1Null() {
                this[this.tableTemp_PowerFeeList.TotalMoney1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndex2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.Index2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndex2Null() {
                this[this.tableTemp_PowerFeeList.Index2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNo2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerNo2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNo2Null() {
                this[this.tableTemp_PowerFeeList.CustomerNo2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerName2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerName2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerName2Null() {
                this[this.tableTemp_PowerFeeList.CustomerName2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartCode2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.StartCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartCode2Null() {
                this[this.tableTemp_PowerFeeList.StartCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndCode2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.EndCode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndCode2Null() {
                this[this.tableTemp_PowerFeeList.EndCode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeAmount2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CountFeeAmount2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeAmount2Null() {
                this[this.tableTemp_PowerFeeList.CountFeeAmount2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoney2Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.TotalMoney2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoney2Null() {
                this[this.tableTemp_PowerFeeList.TotalMoney2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNo3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerNo3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNo3Null() {
                this[this.tableTemp_PowerFeeList.CustomerNo3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerName3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CustomerName3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerName3Null() {
                this[this.tableTemp_PowerFeeList.CustomerName3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartCode3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.StartCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartCode3Null() {
                this[this.tableTemp_PowerFeeList.StartCode3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndCode3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.EndCode3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndCode3Null() {
                this[this.tableTemp_PowerFeeList.EndCode3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeAmount3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.CountFeeAmount3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeAmount3Null() {
                this[this.tableTemp_PowerFeeList.CountFeeAmount3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoney3Null() {
                return this.IsNull(this.tableTemp_PowerFeeList.TotalMoney3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoney3Null() {
                this[this.tableTemp_PowerFeeList.TotalMoney3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_Volumn_List1Row : global::System.Data.DataRow {
            
            private V_Volumn_List1DataTable tableV_Volumn_List1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_Volumn_List1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_Volumn_List1 = ((V_Volumn_List1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumnNo {
                get {
                    try {
                        return ((string)(this[this.tableV_Volumn_List1.VolumnNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_Volumn_List1”中列“VolumnNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_Volumn_List1.VolumnNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountNum {
                get {
                    try {
                        return ((float)(this[this.tableV_Volumn_List1.CountNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_Volumn_List1”中列“CountNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_Volumn_List1.CountNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CountFeeAmount {
                get {
                    try {
                        return ((float)(this[this.tableV_Volumn_List1.CountFeeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_Volumn_List1”中列“CountFeeAmount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_Volumn_List1.CountFeeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney {
                get {
                    try {
                        return ((float)(this[this.tableV_Volumn_List1.TotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_Volumn_List1”中列“TotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_Volumn_List1.TotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolumnNoNull() {
                return this.IsNull(this.tableV_Volumn_List1.VolumnNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolumnNoNull() {
                this[this.tableV_Volumn_List1.VolumnNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNumNull() {
                return this.IsNull(this.tableV_Volumn_List1.CountNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNumNull() {
                this[this.tableV_Volumn_List1.CountNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeAmountNull() {
                return this.IsNull(this.tableV_Volumn_List1.CountFeeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeAmountNull() {
                this[this.tableV_Volumn_List1.CountFeeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoneyNull() {
                return this.IsNull(this.tableV_Volumn_List1.TotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoneyNull() {
                this[this.tableV_Volumn_List1.TotalMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_InvoiceTotalRow : global::System.Data.DataRow {
            
            private Temp_InvoiceTotalDataTable tableTemp_InvoiceTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_InvoiceTotalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_InvoiceTotal = ((Temp_InvoiceTotalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceType {
                get {
                    try {
                        return ((string)(this[this.tableTemp_InvoiceTotal.InvoiceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_InvoiceTotal”中列“InvoiceType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_InvoiceTotal.InvoiceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float TotalMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_InvoiceTotal.TotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_InvoiceTotal”中列“TotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_InvoiceTotal.TotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceTypeNull() {
                return this.IsNull(this.tableTemp_InvoiceTotal.InvoiceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceTypeNull() {
                this[this.tableTemp_InvoiceTotal.InvoiceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMoneyNull() {
                return this.IsNull(this.tableTemp_InvoiceTotal.TotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMoneyNull() {
                this[this.tableTemp_InvoiceTotal.TotalMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_DayChargeRow : global::System.Data.DataRow {
            
            private Temp_DayChargeDataTable tableTemp_DayCharge;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_DayChargeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_DayCharge = ((Temp_DayChargeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCount {
                get {
                    try {
                        return ((int)(this[this.tableTemp_DayCharge.CustomerCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_DayCharge”中列“CustomerCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_DayCharge.CustomerCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DayCharge {
                get {
                    try {
                        return ((float)(this[this.tableTemp_DayCharge.DayChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_DayCharge”中列“DayCharge”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_DayCharge.DayChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AccountRec {
                get {
                    try {
                        return ((float)(this[this.tableTemp_DayCharge.AccountRecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_DayCharge”中列“AccountRec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_DayCharge.AccountRecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FactRec {
                get {
                    try {
                        return ((float)(this[this.tableTemp_DayCharge.FactRecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_DayCharge”中列“FactRec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_DayCharge.FactRecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DayAdvanceDeposit {
                get {
                    try {
                        return ((float)(this[this.tableTemp_DayCharge.DayAdvanceDepositColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_DayCharge”中列“DayAdvanceDeposit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_DayCharge.DayAdvanceDepositColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerCountNull() {
                return this.IsNull(this.tableTemp_DayCharge.CustomerCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerCountNull() {
                this[this.tableTemp_DayCharge.CustomerCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayChargeNull() {
                return this.IsNull(this.tableTemp_DayCharge.DayChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayChargeNull() {
                this[this.tableTemp_DayCharge.DayChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountRecNull() {
                return this.IsNull(this.tableTemp_DayCharge.AccountRecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountRecNull() {
                this[this.tableTemp_DayCharge.AccountRecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactRecNull() {
                return this.IsNull(this.tableTemp_DayCharge.FactRecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactRecNull() {
                this[this.tableTemp_DayCharge.FactRecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayAdvanceDepositNull() {
                return this.IsNull(this.tableTemp_DayCharge.DayAdvanceDepositColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayAdvanceDepositNull() {
                this[this.tableTemp_DayCharge.DayAdvanceDepositColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_MonthChargeRow : global::System.Data.DataRow {
            
            private Temp_MonthChargeDataTable tableTemp_MonthCharge;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_MonthChargeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_MonthCharge = ((Temp_MonthChargeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableTemp_MonthCharge.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“UserName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerCount {
                get {
                    try {
                        return ((int)(this[this.tableTemp_MonthCharge.CustomerCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“CustomerCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.CustomerCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MonthCharge {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthCharge.MonthChargeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“MonthCharge”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.MonthChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AccountRec {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthCharge.AccountRecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“AccountRec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.AccountRecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FactRec {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthCharge.FactRecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“FactRec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.FactRecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MonthAdvanceDeposit {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthCharge.MonthAdvanceDepositColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“MonthAdvanceDeposit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.MonthAdvanceDepositColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MonthTotalMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_MonthCharge.MonthTotalMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_MonthCharge”中列“MonthTotalMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_MonthCharge.MonthTotalMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableTemp_MonthCharge.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableTemp_MonthCharge.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerCountNull() {
                return this.IsNull(this.tableTemp_MonthCharge.CustomerCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerCountNull() {
                this[this.tableTemp_MonthCharge.CustomerCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthChargeNull() {
                return this.IsNull(this.tableTemp_MonthCharge.MonthChargeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthChargeNull() {
                this[this.tableTemp_MonthCharge.MonthChargeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountRecNull() {
                return this.IsNull(this.tableTemp_MonthCharge.AccountRecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountRecNull() {
                this[this.tableTemp_MonthCharge.AccountRecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFactRecNull() {
                return this.IsNull(this.tableTemp_MonthCharge.FactRecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFactRecNull() {
                this[this.tableTemp_MonthCharge.FactRecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthAdvanceDepositNull() {
                return this.IsNull(this.tableTemp_MonthCharge.MonthAdvanceDepositColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthAdvanceDepositNull() {
                this[this.tableTemp_MonthCharge.MonthAdvanceDepositColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthTotalMoneyNull() {
                return this.IsNull(this.tableTemp_MonthCharge.MonthTotalMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthTotalMoneyNull() {
                this[this.tableTemp_MonthCharge.MonthTotalMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_CityArrearRow : global::System.Data.DataRow {
            
            private Temp_CityArrearDataTable tableTemp_CityArrear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_CityArrearRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_CityArrear = ((Temp_CityArrearDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo {
                get {
                    try {
                        return ((string)(this[this.tableTemp_CityArrear.CustomerNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“CustomerNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.CustomerNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableTemp_CityArrear.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JanArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.JanArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“JanArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.JanArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FebArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.FebArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“FebArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.FebArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MarArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.MarArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“MarArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.MarArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AprArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.AprArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“AprArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.AprArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MayArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.MayArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“MayArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.MayArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JunArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.JunArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“JunArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.JunArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JulArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.JulArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“JulArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.JulArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AugArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.AugArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“AugArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.AugArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SepArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.SepArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“SepArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.SepArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OctArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.OctArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“OctArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.OctArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float NovArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.NovArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“NovArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.NovArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DecArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_CityArrear.DecArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_CityArrear”中列“DecArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_CityArrear.DecArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNoNull() {
                return this.IsNull(this.tableTemp_CityArrear.CustomerNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNoNull() {
                this[this.tableTemp_CityArrear.CustomerNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableTemp_CityArrear.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableTemp_CityArrear.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJanArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.JanArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJanArrearMoneyNull() {
                this[this.tableTemp_CityArrear.JanArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFebArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.FebArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFebArrearMoneyNull() {
                this[this.tableTemp_CityArrear.FebArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.MarArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarArrearMoneyNull() {
                this[this.tableTemp_CityArrear.MarArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAprArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.AprArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAprArrearMoneyNull() {
                this[this.tableTemp_CityArrear.AprArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMayArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.MayArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMayArrearMoneyNull() {
                this[this.tableTemp_CityArrear.MayArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJunArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.JunArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJunArrearMoneyNull() {
                this[this.tableTemp_CityArrear.JunArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJulArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.JulArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJulArrearMoneyNull() {
                this[this.tableTemp_CityArrear.JulArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAugArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.AugArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAugArrearMoneyNull() {
                this[this.tableTemp_CityArrear.AugArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSepArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.SepArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSepArrearMoneyNull() {
                this[this.tableTemp_CityArrear.SepArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOctArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.OctArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOctArrearMoneyNull() {
                this[this.tableTemp_CityArrear.OctArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNovArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.NovArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNovArrearMoneyNull() {
                this[this.tableTemp_CityArrear.NovArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDecArrearMoneyNull() {
                return this.IsNull(this.tableTemp_CityArrear.DecArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDecArrearMoneyNull() {
                this[this.tableTemp_CityArrear.DecArrearMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_ArrearSumRow : global::System.Data.DataRow {
            
            private Temp_ArrearSumDataTable tableTemp_ArrearSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_ArrearSumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_ArrearSum = ((Temp_ArrearSumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumeNo {
                get {
                    try {
                        return ((string)(this[this.tableTemp_ArrearSum.VolumeNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“VolumeNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.VolumeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JanArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.JanArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“JanArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.JanArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float FebArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.FebArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“FebArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.FebArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MarArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.MarArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“MarArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.MarArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AprArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.AprArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“AprArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.AprArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float MayArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.MayArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“MayArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.MayArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JunArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.JunArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“JunArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.JunArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float JulArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.JulArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“JulArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.JulArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AugArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.AugArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“AugArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.AugArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float SepArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.SepArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“SepArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.SepArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OctArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.OctArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“OctArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.OctArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float NovArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.NovArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“NovArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.NovArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float DecArrearMoney {
                get {
                    try {
                        return ((float)(this[this.tableTemp_ArrearSum.DecArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearSum”中列“DecArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearSum.DecArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolumeNoNull() {
                return this.IsNull(this.tableTemp_ArrearSum.VolumeNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolumeNoNull() {
                this[this.tableTemp_ArrearSum.VolumeNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJanArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.JanArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJanArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.JanArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFebArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.FebArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFebArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.FebArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.MarArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.MarArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAprArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.AprArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAprArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.AprArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMayArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.MayArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMayArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.MayArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJunArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.JunArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJunArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.JunArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJulArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.JulArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJulArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.JulArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAugArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.AugArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAugArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.AugArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSepArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.SepArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSepArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.SepArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOctArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.OctArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOctArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.OctArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNovArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.NovArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNovArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.NovArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDecArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearSum.DecArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDecArrearMoneyNull() {
                this[this.tableTemp_ArrearSum.DecArrearMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_RuralOweRow : global::System.Data.DataRow {
            
            private V_RuralOweDataTable tableV_RuralOwe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_RuralOweRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_RuralOwe = ((V_RuralOweDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountFeeDate {
                get {
                    try {
                        return ((string)(this[this.tableV_RuralOwe.CountFeeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_RuralOwe”中列“CountFeeDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_RuralOwe.CountFeeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float AdvanceDepositSum {
                get {
                    try {
                        return ((float)(this[this.tableV_RuralOwe.AdvanceDepositSumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“V_RuralOwe”中列“AdvanceDepositSum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_RuralOwe.AdvanceDepositSumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountFeeDateNull() {
                return this.IsNull(this.tableV_RuralOwe.CountFeeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountFeeDateNull() {
                this[this.tableV_RuralOwe.CountFeeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdvanceDepositSumNull() {
                return this.IsNull(this.tableV_RuralOwe.AdvanceDepositSumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdvanceDepositSumNull() {
                this[this.tableV_RuralOwe.AdvanceDepositSumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NegativeInvoiceRow : global::System.Data.DataRow {
            
            private NegativeInvoiceDataTable tableNegativeInvoice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NegativeInvoiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNegativeInvoice = ((NegativeInvoiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerNo {
                get {
                    try {
                        return ((string)(this[this.tableNegativeInvoice.CustomerNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“CustomerNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.CustomerNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableNegativeInvoice.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“CustomerName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float NegativeValue {
                get {
                    try {
                        return ((float)(this[this.tableNegativeInvoice.NegativeValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“NegativeValue”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.NegativeValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float NegativeMoney {
                get {
                    try {
                        return ((float)(this[this.tableNegativeInvoice.NegativeMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“NegativeMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.NegativeMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NegativeDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNegativeInvoice.NegativeDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“NegativeDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.NegativeDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PrintDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNegativeInvoice.PrintDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“PrintDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.PrintDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintMan {
                get {
                    try {
                        return ((string)(this[this.tableNegativeInvoice.PrintManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“NegativeInvoice”中列“PrintMan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableNegativeInvoice.PrintManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNoNull() {
                return this.IsNull(this.tableNegativeInvoice.CustomerNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNoNull() {
                this[this.tableNegativeInvoice.CustomerNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableNegativeInvoice.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableNegativeInvoice.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNegativeValueNull() {
                return this.IsNull(this.tableNegativeInvoice.NegativeValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNegativeValueNull() {
                this[this.tableNegativeInvoice.NegativeValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNegativeMoneyNull() {
                return this.IsNull(this.tableNegativeInvoice.NegativeMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNegativeMoneyNull() {
                this[this.tableNegativeInvoice.NegativeMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNegativeDateNull() {
                return this.IsNull(this.tableNegativeInvoice.NegativeDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNegativeDateNull() {
                this[this.tableNegativeInvoice.NegativeDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintDateNull() {
                return this.IsNull(this.tableNegativeInvoice.PrintDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintDateNull() {
                this[this.tableNegativeInvoice.PrintDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintManNull() {
                return this.IsNull(this.tableNegativeInvoice.PrintManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintManNull() {
                this[this.tableNegativeInvoice.PrintManColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Temp_ArrearYearsSumRow : global::System.Data.DataRow {
            
            private Temp_ArrearYearsSumDataTable tableTemp_ArrearYearsSum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Temp_ArrearYearsSumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemp_ArrearYearsSum = ((Temp_ArrearYearsSumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableTemp_ArrearYearsSum.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“Year”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumeNo {
                get {
                    return ((string)(this[this.tableTemp_ArrearYearsSum.VolumeNoColumn]));
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.VolumeNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JanArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.JanArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“JanArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.JanArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FebArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.FebArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“FebArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.FebArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MarArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.MarArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“MarArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.MarArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AprArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.AprArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“AprArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.AprArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MayArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.MayArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“MayArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.MayArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JunArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.JunArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“JunArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.JunArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double JulArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.JulArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“JulArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.JulArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AugArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.AugArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“AugArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.AugArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SepArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.SepArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“SepArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.SepArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double OctArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.OctArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“OctArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.OctArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NovArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.NovArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“NovArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.NovArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DecArrearMoney {
                get {
                    try {
                        return ((double)(this[this.tableTemp_ArrearYearsSum.DecArrearMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Temp_ArrearYearsSum”中列“DecArrearMoney”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTemp_ArrearYearsSum.DecArrearMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableTemp_ArrearYearsSum.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJanArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.JanArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJanArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.JanArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFebArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.FebArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFebArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.FebArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.MarArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.MarArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAprArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.AprArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAprArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.AprArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMayArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.MayArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMayArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.MayArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJunArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.JunArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJunArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.JunArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJulArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.JulArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJulArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.JulArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAugArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.AugArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAugArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.AugArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSepArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.SepArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSepArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.SepArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOctArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.OctArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOctArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.OctArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNovArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.NovArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNovArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.NovArrearMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDecArrearMoneyNull() {
                return this.IsNull(this.tableTemp_ArrearYearsSum.DecArrearMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDecArrearMoneyNull() {
                this[this.tableTemp_ArrearYearsSum.DecArrearMoneyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_MonthPowerFeeRowChangeEvent : global::System.EventArgs {
            
            private Temp_MonthPowerFeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeRowChangeEvent(Temp_MonthPowerFeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthPowerFeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_CAreaPowerRowChangeEvent : global::System.EventArgs {
            
            private Temp_CAreaPowerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerRowChangeEvent(Temp_CAreaPowerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CAreaPowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_LinePowerRowChangeEvent : global::System.EventArgs {
            
            private Temp_LinePowerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerRowChangeEvent(Temp_LinePowerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_LinePowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_RAreaPowerRowChangeEvent : global::System.EventArgs {
            
            private Temp_RAreaPowerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerRowChangeEvent(Temp_RAreaPowerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_RAreaPowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_HingePowerRowChangeEvent : global::System.EventArgs {
            
            private Temp_HingePowerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerRowChangeEvent(Temp_HingePowerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_HingePowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_PowerFeeListRowChangeEvent : global::System.EventArgs {
            
            private Temp_PowerFeeListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListRowChangeEvent(Temp_PowerFeeListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_PowerFeeListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_Volumn_List1RowChangeEvent : global::System.EventArgs {
            
            private V_Volumn_List1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1RowChangeEvent(V_Volumn_List1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_Volumn_List1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_InvoiceTotalRowChangeEvent : global::System.EventArgs {
            
            private Temp_InvoiceTotalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalRowChangeEvent(Temp_InvoiceTotalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_InvoiceTotalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_DayChargeRowChangeEvent : global::System.EventArgs {
            
            private Temp_DayChargeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeRowChangeEvent(Temp_DayChargeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_DayChargeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_MonthChargeRowChangeEvent : global::System.EventArgs {
            
            private Temp_MonthChargeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeRowChangeEvent(Temp_MonthChargeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_MonthChargeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_CityArrearRowChangeEvent : global::System.EventArgs {
            
            private Temp_CityArrearRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearRowChangeEvent(Temp_CityArrearRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_CityArrearRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_ArrearSumRowChangeEvent : global::System.EventArgs {
            
            private Temp_ArrearSumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumRowChangeEvent(Temp_ArrearSumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearSumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_RuralOweRowChangeEvent : global::System.EventArgs {
            
            private V_RuralOweRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweRowChangeEvent(V_RuralOweRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_RuralOweRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NegativeInvoiceRowChangeEvent : global::System.EventArgs {
            
            private NegativeInvoiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceRowChangeEvent(NegativeInvoiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NegativeInvoiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Temp_ArrearYearsSumRowChangeEvent : global::System.EventArgs {
            
            private Temp_ArrearYearsSumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumRowChangeEvent(Temp_ArrearYearsSumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Temp_ArrearYearsSumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591